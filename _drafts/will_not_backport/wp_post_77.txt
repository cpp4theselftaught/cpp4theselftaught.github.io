ID: 115
post_author: 1
post_date: "2014-03-31 11:06:35"
post_date_gmt: "2014-03-31 15:06:35"
post_content: "n<div class="topsy_widget_data topsy_theme_blue" style="float: right;margin-left: 0.75em; background: url(data:,%7B%20%22url%22%3A%20%22http%253A%252F%252Frlc.vlinder.ca%252Fblog%252F2011%252F08%252Fchausette-starting-to-echo%252F%22%2C%20%22shorturl%22%3A%20%22http%3A%2F%2Fbit.ly%2FnRNYfr%22%2C%20%22style%22%3A%20%22big%22%2C%20%22title%22%3A%20%22Chausette%3A%20Starting%20to%20echo%22%20%7D);"></div>n<p> <audio id="wp_mep_3" src="http://vlinder.ca/podcasts/33-starting-to-echo.mp3" controls="controls" preload="none" >n n n n n n n n <object width="400" height="30" type="application/x-shockwave-flash" data="http://rlc.vlinder.ca/wp-content/plugins/media-element-html5-video-and-audio-player/mediaelement/flashmediaelement.swf">n <param name="movie" value="http://rlc.vlinder.ca/wp-content/plugins/media-element-html5-video-and-audio-player/mediaelement/flashmediaelement.swf" />n <param name="flashvars" value="controls=true&amp;file=http://vlinder.ca/podcasts/33-starting-to-echo.mp3" /> n </object> n </audio>n<script type="text/javascript">njQuery(document).ready(function($) {n $('#wp_mep_3').mediaelementplayer({n m:1n n ,features: ['playpause','current','progress','duration','volume','tracks','fullscreen']n ,audioWidth:400,audioHeight:30n });n});n</script>nThe last time we looked at the code for Chausette, before we went on a tangent about functional programming, we were working on a bit of example code that could accept a TCP connection and output to the console whatever it received. That was <a href="http://rlc.vlinder.ca/blog/2010/12/event-driven-software-step-1-select/" title="Event-driven software, step 1: select" >episode 28: &#8220;Event-driven software, step 1: select&#8221;</a>. This time, we will build onto that code and start by sending data back over the connection.<br />n<span id="more-1650"></span><br />nWe will go through three steps in this episode:n<ol>n<li>adding anonymous (but named) attributes to the <code>Socket</code> class</li>n<li>echoing incoming data, using a <code>vector</code> as the buffer; and</li>n<li>echoing more data than the socket can handle in a single write</li>n</ol>n<h2>1- Adding anonymous (but named) attributes to the <code>Socket</code> class</h2>n<p>We will want to be able to associate data &#8212; the data we&#8217;ve received &#8212; with the socket we&#8217;ve received it on, <em>as</em> the data we want to send. To do that, we will create an <code>Attributes</code> class which will allow for a simple integer-to-attribute mapping, in which the attribute can have any type &#8212; modeled after the attributes you can associate with I/O streams.</p>n<p>In fact, the standard library&#8217;s I/O streams contain three functions of interest: <code>xalloc</code>, <code>iword</code> and <code>pword</code>. These three functions allow you to allocate an integer (using <code>xalloc</code>) for later use as a key to an anonymous attribute of any stream. The other two functions allow for access to that attribute as an integer or as a pointer.</p>n<p>These attributes are very useful in all kinds of situations, but they are not type-safe. Our implementation will be.</p>n<p>Let&#8217;s first have a look at our new base class &#8211; which is where all the magic will happen:</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #339900;">#ifndef vlinder_chausette_core_attributes_h</span>n<span style="color: #339900;">#define vlinder_chausette_core_attributes_h</span>n&nbsp;n<span style="color: #339900;">#include &quot;Details/prologue.h&quot;</span>n<span style="color: #339900;">#include &lt;boost/any.hpp&gt;</span>n&nbsp;n<span style="color: #0000ff;">namespace</span> Vlinder <span style="color: #008000;">&#123;</span> <span style="color: #0000ff;">namespace</span> Chausette <span style="color: #008000;">&#123;</span> <span style="color: #0000ff;">namespace</span> Core <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">class</span> VLINDER_CHAUSETTE_CORE_API Attributesn <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">public</span> <span style="color: #008080;">:</span>n <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">int</span> alloc<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n&nbsp;n boost<span style="color: #008080;">::</span><span style="color: #007788;">any</span><span style="color: #000040;">&amp;</span> get<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">int</span> index<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">const</span> boost<span style="color: #008080;">::</span><span style="color: #007788;">any</span><span style="color: #000040;">&amp;</span> get<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">int</span> index<span style="color: #008000;">&#41;</span> <span style="color: #0000ff;">const</span><span style="color: #008080;">;</span>n&nbsp;n <span style="color: #0000ff;">private</span> <span style="color: #008080;">:</span>n <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">int</span> id_max__ <span style="color: #000080;">=</span> <span style="color: #0000dd;">48</span><span style="color: #008080;">;</span>n&nbsp;n boost<span style="color: #008080;">::</span><span style="color: #007788;">any</span> attributes_<span style="color: #008000;">&#91;</span>id_max__<span style="color: #008000;">&#93;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">int</span> next_id__<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008000;">&#125;</span><span style="color: #008000;">&#125;</span>n&nbsp;n<span style="color: #339900;">#endif</span></pre></td></tr></table></div>nn<p>This class, which is part of <a href="https://gitorious.org/chausette/chausette/commit/c218d63aa002c1a772ab810c62beed003c8562be" title="the commit on Gitorious" >our first commit for this installment</a>, contains an array of <code>boost::any</code> instances to hold our attributes. The <code>boost::any</code> class is a type-safe single-entry container. More exactly, it is a type-safe variant type without implicit conversion that can contain any (static) type variable and is based on and article called &#8220;Valued Conversions&#8221; by Kevlin Henney which appeared in C++ Report in 2000<sup><a href="http://rlc.vlinder.ca/blog/2011/08/chausette-starting-to-echo/#footnote_0_1650" id="identifier_0_1650" class="footnote-link footnote-identifier-link" title="&ldquo;Valued Conversions&rdquo; by Kevlin Henney, C++ Report 12(7), July/August 2000)">1</a></sup>. We will use it to provide type-safe anonymous attributes to the <code>Socket</code> class.</p>n<p>In order to do that, <code>Socket</code> will <em>privately</em> derive from <code>Attributes</code>:</p>nn<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1n2n3n4n5n6n7n8n9n10n11n12n13n14n15n16n17n18n19n</pre></td><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #0000ff;">struct</span> Socket <span style="color: #008080;">:</span> <span style="color: #0000ff;">private</span> Vlinder<span style="color: #008080;">::</span><span style="color: #007788;">Chausette</span><span style="color: #008080;">::</span><span style="color: #007788;">Core</span><span style="color: #008080;">::</span><span style="color: #007788;">Attributes</span>n<span style="color: #008000;">&#123;</span>n Socket<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">int</span> fd, <span style="color: #0000ff;">int</span> parent_fd <span style="color: #000080;">=</span> <span style="color: #000040;">-</span><span style="color: #0000dd;">1</span><span style="color: #008000;">&#41;</span>n <span style="color: #008080;">:</span> fd_<span style="color: #008000;">&#40;</span>fd<span style="color: #008000;">&#41;</span>n , parent_fd_<span style="color: #008000;">&#40;</span>parent_fd<span style="color: #008000;">&#41;</span>n , read_avail_<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">false</span><span style="color: #008000;">&#41;</span>n , write_avail_<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">false</span><span style="color: #008000;">&#41;</span>n , exc_avail_<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">false</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* no-op */</span> <span style="color: #008000;">&#125;</span>n&nbsp;n <span style="color: #0000ff;">using</span> Vlinder<span style="color: #008080;">::</span><span style="color: #007788;">Chausette</span><span style="color: #008080;">::</span><span style="color: #007788;">Core</span><span style="color: #008080;">::</span><span style="color: #007788;">Attributes</span><span style="color: #008080;">::</span><span style="color: #007788;">alloc</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">using</span> Vlinder<span style="color: #008080;">::</span><span style="color: #007788;">Chausette</span><span style="color: #008080;">::</span><span style="color: #007788;">Core</span><span style="color: #008080;">::</span><span style="color: #007788;">Attributes</span><span style="color: #008080;">::</span><span style="color: #007788;">get</span><span style="color: #008080;">;</span>n&nbsp;n <span style="color: #0000ff;">int</span> fd_<span style="color: #008080;">;</span>n <span style="color: #0000ff;">int</span> parent_fd_<span style="color: #008080;">;</span>n <span style="color: #0000ff;">bool</span> read_avail_<span style="color: #008080;">;</span>n <span style="color: #0000ff;">bool</span> write_avail_<span style="color: #008080;">;</span>n <span style="color: #0000ff;">bool</span> exc_avail_<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span></pre></td></tr></table></div>nn<p>The reason why it derives <em>privately</em> is because, while we want it to inherit the features provided by the <code>Attributes</code> class, we don&#8217;t want the relationship between the two classes to be modeled as an <em>is-a</em> relationship &#8212; we don&#8217;t want to say &#8220;a socket is a container of attributes&#8221;.</p>n<p>Making the inheritance private prevents the user of our <code>Socket</code> class to automatically cast an instance of <code>Socket</code> to an instance of <code>Attributes</code> and prevents <code>static_cast</code> and <code>dynamic_cast</code> from converting between the two. It also makes the inherited accessors private, but they are made public again with the two <code>using</code> statements</p>n<p>Using these attributes, we can associate a buffer of data to send with the socket. Doing that, we can add data to be sent to the socket at any time, and send it as soon as data is ready to be written to the socket.</p>n<h2>2- Echoing incoming data, using a <code>vector</code> as the buffer</h2>n<p>Let&#8217;s see what that looks like.</p>n<p>First, we need to get an attribute ID from the <code>Attributes</code> class, allocating it for future use. We only need one of those for the whole program per kind of data we want to associate with the socket, but we shouldn&#8217;t assume that we will always be the first (and only) piece of code to want to associate something with a socket. We can assume, however, that there will only be one instance of the <code>Application</code> class, so we can handle the association in the constructor of that class.</p>nn<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1n2n3n4n5n6n7n</pre></td><td class="code"><pre class="cpp" style="font-family:monospace;">Application<span style="color: #008080;">::</span><span style="color: #007788;">Application</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>n<span style="color: #008080;">:</span> server_<span style="color: #008000;">&#40;</span><span style="color: #0000dd;">0</span><span style="color: #008000;">&#41;</span>n, socket_attribute_id_<span style="color: #008000;">&#40;</span>Socket<span style="color: #008080;">::</span><span style="color: #007788;">alloc</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n WSADATA wsadata<span style="color: #008080;">;</span>n WSAStartup<span style="color: #008000;">&#40;</span>MAKEWORD<span style="color: #008000;">&#40;</span><span style="color: #0000dd;">2</span>, <span style="color: #0000dd;">2</span><span style="color: #008000;">&#41;</span>, <span style="color: #000040;">&amp;</span>wsadata<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span></pre></td></tr></table></div>nn<p>The allocation is on line 3.</p>n<p>Now, in our particular case, we want to associate the data we receive with the socket, because that is the data we will be sending. We do that by getting the attribute, seeing if there&#8217;s anything there and associating an empty buffer with the socket if there isn&#8217;t, like so:</p>nn<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1n2n3n4n5n6n</pre></td><td class="code"><pre class="cpp" style="font-family:monospace;"> <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>socket.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span>socket_attribute_id_<span style="color: #008000;">&#41;</span>.<span style="color: #007788;">empty</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n socket.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span>socket_attribute_id_<span style="color: #008000;">&#41;</span> <span style="color: #000080;">=</span> vector<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span><span style="color: #0000dd;">1024</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* already have a buffer */</span> <span style="color: #008000;">&#125;</span></pre></td></tr></table></div>nn<p>Note that on line 3 of this snippet, we initialize the vector to have a size of 1 KiB &#8212; 1024 bytes. That&#8217;s because we will use this buffer as a receive buffer as well as as a send buffer, and in the code immediately following, we will use it as such:</p>nn<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>7n8n9n10n</pre></td><td class="code"><pre class="cpp" style="font-family:monospace;"> vector<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #000080;">&gt;</span> <span style="color: #000040;">&amp;</span>buffer <span style="color: #000080;">=</span> any_cast<span style="color: #000080;">&lt;</span> vector<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #000080;">&gt;</span><span style="color: #000040;">&amp;</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>socket.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span>socket_attribute_id_<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n buffer.<span style="color: #007788;">resize</span><span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">capacity</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">int</span> data_read<span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">size</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n server_<span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>read<span style="color: #008000;">&#40;</span>socket, <span style="color: #000040;">&amp;</span>buffer<span style="color: #008000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #008000;">&#93;</span>, <span style="color: #000040;">&amp;</span>data_read<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span></pre></td></tr></table></div>nn<p>Note that in line 7, we get a <em>reference</em> to the vector so any changes we make the the vector are made directly to the attribute and we don&#8217;t need to make any copies. On line 8, we resize the buffer to its full capacity (meaning that if at any point we made it larger than the one KiB we initialized it to, we will have all of that space available) and we then call <code>read</code> on the server.</p>n<p>As you can probably tell (or perhaps remember), <code>read</code> returns the number of bytes actually read in the parameter we give it, so we now have to resize the buffer back to the size of the data we actually got and, because we want to echo, we will send it back:</p>nn<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>11n12n13n</pre></td><td class="code"><pre class="cpp" style="font-family:monospace;"> buffer.<span style="color: #007788;">resize</span><span style="color: #008000;">&#40;</span>data_read<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n server_<span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>write<span style="color: #008000;">&#40;</span>socket, <span style="color: #000040;">&amp;</span>buffer<span style="color: #008000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #008000;">&#93;</span>, <span style="color: #000040;">&amp;</span>data_read<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n buffer.<span style="color: #007788;">erase</span><span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> data_read<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span></pre></td></tr></table></div>nn<p>Note that on line 13, we erase anything we sent from the buffer &#8211; but we don&#8217;t actually necessarily think everything was sent &#8212; and it is not an error if that was not the case. That&#8217;s because the implementation will call our <code>onWriteReady</code> method when we can send more data, which looks like this:</p>nn<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1n2n3n4n5n6n7n8n9n10n11n12n13n14n15n16n17n</pre></td><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #ff0000; font-style: italic;">/*virtual */</span><span style="color: #0000ff;">void</span> Application<span style="color: #008080;">::</span><span style="color: #007788;">onWriteReady</span><span style="color: #008000;">&#40;</span>Socket <span style="color: #000040;">&amp;</span>socket<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>socket.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span>socket_attribute_id_<span style="color: #008000;">&#41;</span>.<span style="color: #007788;">empty</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* no-op */</span> <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n vector<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #000080;">&gt;</span> <span style="color: #000040;">&amp;</span>buffer <span style="color: #000080;">=</span> any_cast<span style="color: #000080;">&lt;</span> vector<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #000080;">&gt;</span><span style="color: #000040;">&amp;</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>socket.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span>socket_attribute_id_<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">empty</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* no-op */</span> <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">int</span> data_written<span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">size</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n server_<span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>write<span style="color: #008000;">&#40;</span>socket, <span style="color: #000040;">&amp;</span>buffer<span style="color: #008000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #008000;">&#93;</span>, <span style="color: #000040;">&amp;</span>data_written<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n buffer.<span style="color: #007788;">erase</span><span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> data_written<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span></pre></td></tr></table></div>nn<p>As you can see, this method doesn&#8217;t do anything if there&#8217;s no buffer associated with the socket, or if the associated buffer is empty. Otherwise, it attempts to send anything it can and erases what it could send from the buffer.</p>n<h2>3- Echoing more data than the socket can handle in a single write</h2>n<p>There&#8217;s very little chance of that code ever being called if all we do is echo, however, so we could do a bit more than that &#8211; say echo everything four times. That means our <code>onDataReady</code> function will now look like this:</p>nn<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1n2n3n4n5n6n7n8n9n10n11n12n13n14n15n16n17n18n</pre></td><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #ff0000; font-style: italic;">/*virtual */</span><span style="color: #0000ff;">void</span> Application<span style="color: #008080;">::</span><span style="color: #007788;">onDataReady</span><span style="color: #008000;">&#40;</span>Socket <span style="color: #000040;">&amp;</span>socket<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>socket.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span>socket_attribute_id_<span style="color: #008000;">&#41;</span>.<span style="color: #007788;">empty</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n socket.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span>socket_attribute_id_<span style="color: #008000;">&#41;</span> <span style="color: #000080;">=</span> vector<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span><span style="color: #0000dd;">1024</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* already have a buffer */</span> <span style="color: #008000;">&#125;</span>n vector<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #000080;">&gt;</span> <span style="color: #000040;">&amp;</span>buffer <span style="color: #000080;">=</span> any_cast<span style="color: #000080;">&lt;</span> vector<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #000080;">&gt;</span><span style="color: #000040;">&amp;</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>socket.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span>socket_attribute_id_<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n buffer.<span style="color: #007788;">resize</span><span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">capacity</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">int</span> data_read<span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">size</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n server_<span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>read<span style="color: #008000;">&#40;</span>socket, <span style="color: #000040;">&amp;</span>buffer<span style="color: #008000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #008000;">&#93;</span>, <span style="color: #000040;">&amp;</span>data_read<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n buffer.<span style="color: #007788;">resize</span><span style="color: #008000;">&#40;</span>data_read <span style="color: #000040;">*</span> <span style="color: #0000dd;">4</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n std<span style="color: #008080;">::</span><span style="color: #007788;">copy</span><span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> data_read, buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> data_read<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n std<span style="color: #008080;">::</span><span style="color: #007788;">copy</span><span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> <span style="color: #008000;">&#40;</span>data_read <span style="color: #000040;">*</span> <span style="color: #0000dd;">2</span><span style="color: #008000;">&#41;</span>, buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> <span style="color: #008000;">&#40;</span>data_read <span style="color: #000040;">*</span> <span style="color: #0000dd;">2</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n server_<span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>write<span style="color: #008000;">&#40;</span>socket, <span style="color: #000040;">&amp;</span>buffer<span style="color: #008000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #008000;">&#93;</span>, <span style="color: #000040;">&amp;</span>data_read<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n buffer.<span style="color: #007788;">erase</span><span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> data_read<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span></pre></td></tr></table></div>nn<p>Notice the difference? It&#8217;s on lines 13, 14 and 15, where we resize the buffer to four times the amount of data we received and copy the data into the expanded part of the buffer.</p>n<p>Now, there&#8217;s a subtle &#8211; but present &#8212; bug in this code (and unlike the one I can&#8217;t seem to find anymore in the <code>Yard</code> class from a few months back, I&#8217;ll tell you where it is.</p>n<p>Imagine you&#8217;re sending and receiving data more or less at the same time. Look at what happens on lines 10, 11 and 12 of <code>onDataReady</code> and try to figure out what the bug is &#8212; and how to fix it.</p>n<div class="aside-toggler closed"><span class="open-aside answer">To see the <em>answer</em> click here.</span><span class="close-aside answer">To hide the <em>answer</em> click here.</span>n </div><div class="bnsia aside answer closed">What will happen is that the buffer will be overwritten with whatever you happen to receive, meaning some of the data you were supposed to echo will not be echoed. One way to fix that is to use a separate buffer for receiving. Another way to fix that is to automatically append to the buffer you&#8217;re receiving in by initially resizing the buffer to &#8211; e.g. &#8211; 1 KiB beyond the data that&#8217;s already in there. The latter solution is slightly less costly w.r.t run-time (but may ultimately be more costly in space overhead) and looks like this:</p>nn<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1n2n3n4n5n6n7n8n9n10n11n12n13n14n15n16n17n18n19n20n21n22n23n24n25n26n27n28n29n30n31n32n33n34n</pre></td><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #ff0000; font-style: italic;">/*virtual */</span><span style="color: #0000ff;">void</span> Application<span style="color: #008080;">::</span><span style="color: #007788;">onDataReady</span><span style="color: #008000;">&#40;</span>Socket <span style="color: #000040;">&amp;</span>socket<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">bool</span> needed_to_initialize<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">false</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n std<span style="color: #008080;">::</span><span style="color: #007788;">vector</span><span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #000080;">&gt;</span><span style="color: #008080;">::</span><span style="color: #007788;">size_type</span> offset<span style="color: #008000;">&#40;</span><span style="color: #0000dd;">0</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>socket.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span>socket_attribute_id_<span style="color: #008000;">&#41;</span>.<span style="color: #007788;">empty</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n socket.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span>socket_attribute_id_<span style="color: #008000;">&#41;</span> <span style="color: #000080;">=</span> vector<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span><span style="color: #0000dd;">1024</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n needed_to_initialize <span style="color: #000080;">=</span> <span style="color: #0000ff;">true</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* already have a buffer */</span> <span style="color: #008000;">&#125;</span>n vector<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #000080;">&gt;</span> <span style="color: #000040;">&amp;</span>buffer <span style="color: #000080;">=</span> any_cast<span style="color: #000080;">&lt;</span> vector<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #000080;">&gt;</span><span style="color: #000040;">&amp;</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>socket.<span style="color: #007788;">get</span><span style="color: #008000;">&#40;</span>socket_attribute_id_<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span><span style="color: #000040;">!</span>needed_to_initialize <span style="color: #000040;">&amp;&amp;</span> buffer.<span style="color: #007788;">empty</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n buffer.<span style="color: #007788;">resize</span><span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">capacity</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span><span style="color: #000040;">!</span>needed_to_initialize<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n offset <span style="color: #000080;">=</span> buffer.<span style="color: #007788;">size</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n buffer.<span style="color: #007788;">resize</span><span style="color: #008000;">&#40;</span>offset <span style="color: #000040;">+</span> <span style="color: #0000dd;">1024</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* needed to initialize - so no need to account for data already in the buffer */</span> <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">int</span> data_read<span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">size</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">-</span> offset<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">char</span> <span style="color: #000040;">*</span>read_ptr<span style="color: #008000;">&#40;</span><span style="color: #000040;">&amp;</span>buffer<span style="color: #008000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #008000;">&#93;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n read_ptr <span style="color: #000040;">+</span><span style="color: #000080;">=</span> offset<span style="color: #008080;">;</span>n server_<span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>read<span style="color: #008000;">&#40;</span>socket, read_ptr, <span style="color: #000040;">&amp;</span>data_read<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n buffer.<span style="color: #007788;">resize</span><span style="color: #008000;">&#40;</span>offset <span style="color: #000040;">+</span> <span style="color: #008000;">&#40;</span>data_read <span style="color: #000040;">*</span> <span style="color: #0000dd;">4</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n std<span style="color: #008080;">::</span><span style="color: #007788;">copy</span><span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> offset, buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> offset <span style="color: #000040;">+</span> data_read, buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> offset <span style="color: #000040;">+</span> data_read<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n std<span style="color: #008080;">::</span><span style="color: #007788;">copy</span><span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> offset, buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> offset <span style="color: #000040;">+</span> <span style="color: #008000;">&#40;</span>data_read <span style="color: #000040;">*</span> <span style="color: #0000dd;">2</span><span style="color: #008000;">&#41;</span>, buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> offset <span style="color: #000040;">+</span> <span style="color: #008000;">&#40;</span>data_read <span style="color: #000040;">*</span> <span style="color: #0000dd;">2</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">unsigned</span> <span style="color: #0000ff;">int</span> data_written<span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">size</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n server_<span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>write<span style="color: #008000;">&#40;</span>socket, <span style="color: #000040;">&amp;</span>buffer<span style="color: #008000;">&#91;</span><span style="color: #0000dd;">0</span><span style="color: #008000;">&#93;</span>, <span style="color: #000040;">&amp;</span>data_written<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n buffer.<span style="color: #007788;">erase</span><span style="color: #008000;">&#40;</span>buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, buffer.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span> data_written<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span></pre></td></tr></table></div>nn<p></div>nn<ol class="footnotes"><li id="footnote_0_1650" class="footnote"><a href="http://www.two-sdg.demon.co.uk/curbralan/papers/ValuedConversions.pdf" title="The PDF" >&#8220;Valued Conversions&#8221; by Kevlin Henney, C++ Report 12(7), July/August 2000)</a></li></ol>"
post_title: "Chausette: Starting to echo"
post_excerpt: "The last time we looked at the code for Chausette, before we went on a tangent about functional programming, we were working on a bit of example code that could accept a TCP connection and output to the console whatever &hellip; <a href="http://rlc.vlinder.ca/blog/2011/08/chausette-starting-to-echo/">Continue reading <span>&rarr;</span></a>"
post_status: "inherit"
comment_status: "open"
ping_status: "open"
post_password: ""
post_name: "38-revision-v1"
to_ping: ""
pinged: ""
post_modified: "2014-03-31 11:06:35"
post_modified_gmt: "2014-03-31 15:06:35"
post_content_filtered: ""
post_parent: 38
guid: "http://cpp4theselftaught.com/2014/03/38-revision-v1/"
menu_order: 0
post_type: "revision"
post_mime_type: ""
comment_count: 0
