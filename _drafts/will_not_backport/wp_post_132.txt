ID: 149
post_author: 1
post_date: "2013-09-20 18:58:08"
post_date_gmt: "2013-09-20 22:58:08"
post_content: "n<div class="topsy_widget_data topsy_theme_blue" style="float: right;margin-left: 0.75em; background: url(data:,%7B%20%22url%22%3A%20%22http%253A%252F%252Frlc.vlinder.ca%252Fblog%252F2013%252F09%252Frun-time-composed-predicates-and-code-generation%252F%22%2C%20%22shorturl%22%3A%20%22http%3A%2F%2Fbit.ly%2F1abbN2b%22%2C%20%22style%22%3A%20%22big%22%2C%20%22title%22%3A%20%22Run-time%20composed%20predicates%20and%20Code%20generation%20%23code%20%23composed%20%23generation%20%23predicates%20%23run-time%22%20%7D);"></div>n<p>While working on Arachnida, preparing version 2.2 due out this fall, one of the things we&#8217;ll be introducing is a hardened OpenSSL transport-layer-security plug-in, to replace the one we&#8217;ve had for the last seven or so years. One of the new features in this plug-in (which is part of Arachnida&#8217;s &#8220;Scorpion&#8221; module) is a much more flexible configuration scheme including the subject of today&#8217;s post: run-time composed predicates.</p>n<p><span id="more-2367"></span></p>n<p>As the name indicates, run-time composed predicates are predicates that are composed at run-time. In this case, we use them for post-connection validations of the SSL/TLS connection: the user can plug their own post-connection validations in and combine them with the ones provided in the library using AND, OR, NOR, NAND, XOR and NOT primitives. Typically, such a composed predicate would look like this:</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;">configuration.<span style="color: #007788;">post_connection_verification_predicate_</span> <span style="color: #000080;">=</span> and_<span style="color: #008000;">&#40;</span>n and_<span style="color: #008000;">&#40;</span> peer_provided_certificate__, fqdn_matches_peer__<span style="color: #008000;">&#41;</span>n , userProvidedPredicate<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span></pre></td></tr></table></div>nn<p>in which <code>userProvidedPredicate</code> is a pointer to a user-provided predicate function whereas the other two predicates are included in the library.</p>n<p>The thing is that each of the following will also work:</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #666666;">// if the peer provided a predicate, assume everything is fine</span>nconfiguration.<span style="color: #007788;">post_connection_verification_predicate_</span> <span style="color: #000080;">=</span> peer_provided_certificate__<span style="color: #008080;">;</span>n<span style="color: #666666;">// we accept this only of the FQDN in the peer-provided certificate DOES NOT match the peer's FQDN</span>n<span style="color: #666666;">// THIS IS STUPID - DO NOT DO THIS IN YOUR CODE!</span>nconfiguration.<span style="color: #007788;">post_connection_verification_predicate_</span> <span style="color: #000080;">=</span> not_<span style="color: #008000;">&#40;</span>fqdn_matches_peer__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n<span style="color: #666666;">// apply only the user's predicate</span>nconfiguration.<span style="color: #007788;">post_connection_verification_predicate_</span> <span style="color: #000080;">=</span> userProvidedPredicate<span style="color: #008080;">;</span></pre></td></tr></table></div>nn<p>The trick here is that the predicate type, <code>PostConnectionVerificationPredicate</code>, is a function-to-pointer type and the functions <code>and_</code>, <code>or_</code>, <code>xor_</code>, <code>nand_</code>, <code>nor_</code> and <code>not_</code> each return a function to a &#8220;newly created&#8221; function.</p>n<p>Of course, C++ does not allow the creation of functions at run-time and, as the call-back is passed to OpenSSL and OpenSSL is written in C, more to the point, neither does C.</p>n<p>As Arachnida is designed to run on industrial control systems and industrial embedded devices, we want to avoid run-time memory allocation if at all possible &#8212; and when that&#8217;s not possible, we want to control it. In this case, we avoid it by creating an array of pointers to functions, another array of &#8220;configurations&#8221; for those functions and a function for each position in the array. We do this using a Perl script (because we usually use Perl to generate code and it integrates nicely with our build system).</p>n<p>The following chunk of code is the generation script verbatim &#8212; annotated.</p>n<p>First, the usual pre-amble code: for the Perl part, this is invoking the interpreter; for the C++ code, this is including the neccessary headers.</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="perl" style="font-family:monospace;"><span style="color: #666666; font-style: italic;">#! /usr/bin/env perl</span>n<span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$name</span> <span style="color: #339933;">=</span> <span style="color: #0000ff;">$0</span><span style="color: #339933;">;</span>n<span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$max_predicate_count</span> <span style="color: #339933;">=</span> <span style="color: #cc66cc;">20</span><span style="color: #339933;">;</span>n&nbsp;n<span style="color: #000066;">print</span> <span style="color: #339933;">&lt;&lt;</span>EOFn<span style="color: #666666; font-style: italic;">#line 7 &quot;${name}&quot;</span>n<span style="color: #666666; font-style: italic;">#include &quot;Scorpion/OpenSSL/Details/PostConnectionVerificationPredicate.h&quot;</span>n<span style="color: #666666; font-style: italic;">#include &lt;new&gt;</span>n<span style="color: #666666; font-style: italic;">#include &lt;stdexcept&gt;</span></pre></td></tr></table></div>nn<p>The maximum predicate count is set above, and replicated in the generated C++ source code here. To change it, we currently need to change the script. At some point (probably before version 2.2 of Arachnida is released) this will become a command-line argument to the script.</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="perl" style="font-family:monospace;"><span style="color: #666666; font-style: italic;">#define MAX_PREDICATE_COUNT ${max_predicate_count}</span>n&nbsp;nnamespace Scorpion <span style="color: #009900;">&#123;</span> namespace OpenSSL <span style="color: #009900;">&#123;</span> namespace Details <span style="color: #009900;">&#123;</span>nnamespace <span style="color: #009900;">&#123;</span>n static unsigned <span style="color: #000066;">int</span> next_predicate_id__ <span style="color: #339933;">=</span> <span style="color: #cc66cc;">0</span><span style="color: #339933;">;</span></pre></td></tr></table></div>nn<p>The following is how predicates are allocated: any call to any of the predicate construction functions (<code>and_</code>, <code>or_</code>, etc.) will call this once, and throw <code>bad_alloc</code> if it fails.</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="perl" style="font-family:monospace;"> unsigned <span style="color: #000066;">int</span> allocatePredicateID<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span>n <span style="color: #009900;">&#123;</span>n <span style="color: #b1b100;">if</span> <span style="color: #009900;">&#40;</span>MAX_PREDICATE_COUNT <span style="color: #339933;">==</span> next_predicate_id__<span style="color: #009900;">&#41;</span> throw std<span style="color: #339933;">::</span><span style="color: #006600;">bad_alloc</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>n <span style="color: #000066;">return</span> next_predicate_id__<span style="color: #339933;">++;</span>n <span style="color: #009900;">&#125;</span></pre></td></tr></table></div>nn<p>The following structure holds the configuration of the &#8220;generated&#8221; predicate. This is all we need to know for any operator: what the left-hand-side of the expression is, what the right-hand-side is and what operator it is. One operator is unary, all the others are binary. The unary one only uses the <code>lhs_</code> member of this structure.</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="perl" style="font-family:monospace;"> struct PredicateInfon <span style="color: #009900;">&#123;</span>n enum Type <span style="color: #009900;">&#123;</span>n and__n <span style="color: #339933;">,</span> or__n <span style="color: #339933;">,</span> xor__n <span style="color: #339933;">,</span> nand__n <span style="color: #339933;">,</span> nor__n <span style="color: #339933;">,</span> not__n <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>n&nbsp;n Type type_<span style="color: #339933;">;</span>n PostConnectionVerificationPredicate lhs_<span style="color: #339933;">;</span>n PostConnectionVerificationPredicate rhs_<span style="color: #339933;">;</span>n <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span></pre></td></tr></table></div>nn<p>The following is an array of each of these configurations, followed by Perl code to generate each of the functions. I could have used a template to generate these rather than generated code but I find as long as I&#8217;m generating code anyway, it makes more sense to just keep generating &#8212; especially if there&#8217;s no compelling reason to do otherwise.</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="perl" style="font-family:monospace;"> PredicateInfo predicate_infos__<span style="color: #009900;">&#91;</span>MAX_PREDICATE_COUNT<span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>nEOFn<span style="color: #339933;">;</span>n&nbsp;n<span style="color: #b1b100;">for</span> <span style="color: #009900;">&#40;</span><span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$i</span> <span style="color: #339933;">=</span> <span style="color: #cc66cc;">0</span><span style="color: #339933;">;</span> <span style="color: #0000ff;">$i</span> <span style="color: #339933;">&lt;</span> <span style="color: #0000ff;">$max_predicate_count</span><span style="color: #339933;">;</span> <span style="color: #339933;">++</span><span style="color: #0000ff;">$i</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>n <span style="color: #000066;">print</span> <span style="color: #339933;">&lt;&lt;</span>EOFn<span style="color: #666666; font-style: italic;">#line 46 &quot;${name}&quot;</span>n bool predicate<span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#40;</span>SSL <span style="color: #0000ff;">*ssl</span><span style="color: #339933;">,</span> char <span style="color: #0000ff;">*host</span><span style="color: #009900;">&#41;</span>n <span style="color: #009900;">&#123;</span>n switch <span style="color: #009900;">&#40;</span>predicate_infos__<span style="color: #009900;">&#91;</span><span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>type_<span style="color: #009900;">&#41;</span>n <span style="color: #009900;">&#123;</span>n <span style="color: #b1b100;">case</span> PredicateInfo<span style="color: #339933;">::</span><span style="color: #006600;">and__</span> <span style="color: #339933;">:</span>n <span style="color: #000066;">return</span> <span style="color: #009900;">&#40;</span>predicate_infos__<span style="color: #009900;">&#91;</span><span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>lhs_<span style="color: #009900;">&#40;</span>ssl<span style="color: #339933;">,</span> host<span style="color: #009900;">&#41;</span> <span style="color: #339933;">&amp;&amp;</span> predicate_infos__<span style="color: #009900;">&#91;</span><span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>rhs_<span style="color: #009900;">&#40;</span>ssl<span style="color: #339933;">,</span> host<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>n <span style="color: #b1b100;">case</span> PredicateInfo<span style="color: #339933;">::</span><span style="color: #006600;">or__</span> <span style="color: #339933;">:</span>n <span style="color: #000066;">return</span> <span style="color: #009900;">&#40;</span>predicate_infos__<span style="color: #009900;">&#91;</span><span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>lhs_<span style="color: #009900;">&#40;</span>ssl<span style="color: #339933;">,</span> host<span style="color: #009900;">&#41;</span> <span style="color: #339933;">||</span> predicate_infos__<span style="color: #009900;">&#91;</span><span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>rhs_<span style="color: #009900;">&#40;</span>ssl<span style="color: #339933;">,</span> host<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>n <span style="color: #b1b100;">case</span> PredicateInfo<span style="color: #339933;">::</span><span style="color: #006600;">xor__</span> <span style="color: #339933;">:</span>n <span style="color: #009900;">&#123;</span>n long lhs_result<span style="color: #009900;">&#40;</span>predicate_infos__<span style="color: #009900;">&#91;</span><span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>lhs_<span style="color: #009900;">&#40;</span>ssl<span style="color: #339933;">,</span> host<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>n long rhs_result<span style="color: #009900;">&#40;</span>predicate_infos__<span style="color: #009900;">&#91;</span><span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>rhs_<span style="color: #009900;">&#40;</span>ssl<span style="color: #339933;">,</span> host<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>n&nbsp;n <span style="color: #000066;">return</span> <span style="color: #009900;">&#40;</span><span style="color: #009900;">&#40;</span>lhs_result <span style="color: #339933;">!=</span> <span style="color: #cc66cc;">0</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">^</span> <span style="color: #009900;">&#40;</span>rhs_result <span style="color: #339933;">!=</span> <span style="color: #cc66cc;">0</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>n <span style="color: #009900;">&#125;</span>n <span style="color: #b1b100;">case</span> PredicateInfo<span style="color: #339933;">::</span><span style="color: #006600;">nand__</span> <span style="color: #339933;">:</span>n <span style="color: #000066;">return</span> <span style="color: #339933;">!</span><span style="color: #009900;">&#40;</span>predicate_infos__<span style="color: #009900;">&#91;</span><span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>lhs_<span style="color: #009900;">&#40;</span>ssl<span style="color: #339933;">,</span> host<span style="color: #009900;">&#41;</span> <span style="color: #339933;">&amp;&amp;</span> predicate_infos__<span style="color: #009900;">&#91;</span><span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>rhs_<span style="color: #009900;">&#40;</span>ssl<span style="color: #339933;">,</span> host<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>n <span style="color: #b1b100;">case</span> PredicateInfo<span style="color: #339933;">::</span><span style="color: #006600;">nor__</span> <span style="color: #339933;">:</span>n <span style="color: #000066;">return</span> <span style="color: #339933;">!</span><span style="color: #009900;">&#40;</span>predicate_infos__<span style="color: #009900;">&#91;</span><span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>lhs_<span style="color: #009900;">&#40;</span>ssl<span style="color: #339933;">,</span> host<span style="color: #009900;">&#41;</span> <span style="color: #339933;">&amp;&amp;</span> predicate_infos__<span style="color: #009900;">&#91;</span><span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>rhs_<span style="color: #009900;">&#40;</span>ssl<span style="color: #339933;">,</span> host<span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>n <span style="color: #b1b100;">case</span> PredicateInfo<span style="color: #339933;">::</span><span style="color: #006600;">not__</span> <span style="color: #339933;">:</span>n <span style="color: #000066;">return</span> <span style="color: #339933;">!</span>predicate_infos__<span style="color: #009900;">&#91;</span><span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>lhs_<span style="color: #009900;">&#40;</span>ssl<span style="color: #339933;">,</span> host<span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>n <span style="color: #009900;">&#125;</span>n throw std<span style="color: #339933;">::</span><span style="color: #006600;">logic_error</span><span style="color: #009900;">&#40;</span><span style="color: #ff0000;">&quot;Should not reach this code&quot;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>n <span style="color: #009900;">&#125;</span>nEOFn <span style="color: #339933;">;</span>n<span style="color: #009900;">&#125;</span></pre></td></tr></table></div>nn<p>We can now generate the array of function pointers that the operator/generator code will pick from:</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="perl" style="font-family:monospace;"><span style="color: #000066;">print</span> <span style="color: #339933;">&lt;&lt;</span>EOFn<span style="color: #666666; font-style: italic;">#line 77 &quot;${name}&quot;</span>n PostConnectionVerificationPredicate predicates__<span style="color: #009900;">&#91;</span><span style="color: #009900;">&#93;</span> <span style="color: #339933;">=</span> <span style="color: #009900;">&#123;</span>nEOFn<span style="color: #339933;">;</span>n<span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$first</span> <span style="color: #339933;">=</span> <span style="color: #cc66cc;">1</span><span style="color: #339933;">;</span>n<span style="color: #b1b100;">for</span> <span style="color: #009900;">&#40;</span><span style="color: #b1b100;">my</span> <span style="color: #0000ff;">$i</span> <span style="color: #339933;">=</span> <span style="color: #cc66cc;">0</span><span style="color: #339933;">;</span> <span style="color: #0000ff;">$i</span> <span style="color: #339933;">&lt;</span> <span style="color: #0000ff;">$max_predicate_count</span><span style="color: #339933;">;</span> <span style="color: #339933;">++</span><span style="color: #0000ff;">$i</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>n <span style="color: #b1b100;">if</span> <span style="color: #009900;">&#40;</span><span style="color: #0000ff;">$first</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>n <span style="color: #000066;">print</span> <span style="color: #339933;">&lt;&lt;</span>EOFn<span style="color: #666666; font-style: italic;">#line 84 &quot;${name}&quot;</span>n predicate<span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span>nEOFn <span style="color: #339933;">;</span>n <span style="color: #009900;">&#125;</span>n <span style="color: #b1b100;">else</span> <span style="color: #009900;">&#123;</span>n <span style="color: #000066;">print</span> <span style="color: #339933;">&lt;&lt;</span>EOFn<span style="color: #666666; font-style: italic;">#line 91 &quot;${name}&quot;</span>n <span style="color: #339933;">,</span> predicate<span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>i<span style="color: #009900;">&#125;</span>nEOFn <span style="color: #339933;">;</span>n <span style="color: #009900;">&#125;</span>n <span style="color: #0000ff;">$first</span> <span style="color: #339933;">=</span> <span style="color: #cc66cc;">0</span><span style="color: #339933;">;</span>n<span style="color: #009900;">&#125;</span>n<span style="color: #000066;">print</span> <span style="color: #339933;">&lt;&lt;</span>EOFn<span style="color: #666666; font-style: italic;">#line 99 &quot;${name}&quot;</span>n <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>nEOFn <span style="color: #339933;">;</span>n&nbsp;n<span style="color: #000066;">print</span> <span style="color: #339933;">&lt;&lt;</span>EOFn<span style="color: #666666; font-style: italic;">#line 105 &quot;${name}&quot;</span>n<span style="color: #009900;">&#125;</span>nEOFn<span style="color: #339933;">;</span></pre></td></tr></table></div>nn<p>and create a function for each operator. Not that the binary operators are all the same for all intents and purposes, so might as well generate those too.</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="perl" style="font-family:monospace;"><span style="color: #b1b100;">my</span> <span style="color: #0000ff;">@keywords</span> <span style="color: #339933;">=</span> <span style="color: #009966; font-style: italic;">qw/and or nor xor nand/</span><span style="color: #339933;">;</span>n&nbsp;n<span style="color: #b1b100;">foreach</span> <span style="color: #0000ff;">$keyword</span> <span style="color: #009900;">&#40;</span><span style="color: #0000ff;">@keywords</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>n <span style="color: #000066;">print</span> <span style="color: #339933;">&lt;&lt;</span>EOFn<span style="color: #666666; font-style: italic;">#line 113 &quot;${name}&quot;</span>nPostConnectionVerificationPredicate <span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>keyword<span style="color: #009900;">&#125;</span>_<span style="color: #009900;">&#40;</span>PostConnectionVerificationPredicate lhs<span style="color: #339933;">,</span> PostConnectionVerificationPredicate rhs<span style="color: #009900;">&#41;</span>n<span style="color: #009900;">&#123;</span>n unsigned <span style="color: #000066;">int</span> predicate_id<span style="color: #009900;">&#40;</span>allocatePredicateID<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>n predicate_infos__<span style="color: #009900;">&#91;</span>predicate_id<span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>type_ <span style="color: #339933;">=</span> PredicateInfo<span style="color: #339933;">::</span><span style="color: #0000ff;">$</span><span style="color: #009900;">&#123;</span>keyword<span style="color: #009900;">&#125;</span>__<span style="color: #339933;">;</span>n predicate_infos__<span style="color: #009900;">&#91;</span>predicate_id<span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>lhs_ <span style="color: #339933;">=</span> lhs<span style="color: #339933;">;</span>n predicate_infos__<span style="color: #009900;">&#91;</span>predicate_id<span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>rhs_ <span style="color: #339933;">=</span> rhs<span style="color: #339933;">;</span>n <span style="color: #000066;">return</span> predicates__<span style="color: #009900;">&#91;</span>predicate_id<span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>n<span style="color: #009900;">&#125;</span>nEOFn <span style="color: #339933;">;</span>n<span style="color: #009900;">&#125;</span>n&nbsp;n<span style="color: #000066;">print</span> <span style="color: #339933;">&lt;&lt;</span>EOFn<span style="color: #666666; font-style: italic;">#line 127 &quot;${name}&quot;</span>nPostConnectionVerificationPredicate not_<span style="color: #009900;">&#40;</span>PostConnectionVerificationPredicate lhs<span style="color: #009900;">&#41;</span>n<span style="color: #009900;">&#123;</span>n unsigned <span style="color: #000066;">int</span> predicate_id<span style="color: #009900;">&#40;</span>allocatePredicateID<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>n predicate_infos__<span style="color: #009900;">&#91;</span>predicate_id<span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>type_ <span style="color: #339933;">=</span> PredicateInfo<span style="color: #339933;">::</span><span style="color: #006600;">not__</span><span style="color: #339933;">;</span>n predicate_infos__<span style="color: #009900;">&#91;</span>predicate_id<span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>lhs_ <span style="color: #339933;">=</span> lhs<span style="color: #339933;">;</span>n predicate_infos__<span style="color: #009900;">&#91;</span>predicate_id<span style="color: #009900;">&#93;</span><span style="color: #339933;">.</span>rhs_ <span style="color: #339933;">=</span> <span style="color: #cc66cc;">0</span><span style="color: #339933;">;</span>n <span style="color: #000066;">return</span> predicates__<span style="color: #009900;">&#91;</span>predicate_id<span style="color: #009900;">&#93;</span><span style="color: #339933;">;</span>n<span style="color: #009900;">&#125;</span>n&nbsp;n<span style="color: #009900;">&#125;</span><span style="color: #009900;">&#125;</span><span style="color: #009900;">&#125;</span>nEOFn<span style="color: #339933;">;</span></pre></td></tr></table></div>nn<p>A few fun tidbits: the <code>#line</code> directives tell the compiler where to look for the code for stepping etc., so if you step through this code you&#8217;ll be stepping into Perl!</p>n<p>This approach works for a whole slew of other repetitive code. Generated code, once debugged etc., usually scales pretty well: if I need a thousand of these operators for some reason, I have one constant to change and no other questions to ask (except perhaps why I could possibly need that many predicates!)</p>n<p>I used a very similar approach to translate a dump from the Unicode into C code to parse it: computers are very good at repeating themselves with minor variations in what they&#8217;re saying. This is an example of how you can reduce the amount of work you do by making the computer do more.</p>nn"
post_title: "Run-time composed predicates and Code generation"
post_excerpt: "While working on Arachnida, preparing version 2.2 due out this fall, one of the things we&rsquo;ll be introducing is a hardened OpenSSL transport-layer-security plug-in, to replace the one we&rsquo;ve had for the last seven or so years. One of the &hellip; <a href="http://rlc.vlinder.ca/blog/2013/09/run-time-composed-predicates-and-code-generation/">Continue reading <span>&rarr;</span></a>"
post_status: "inherit"
comment_status: "closed"
ping_status: "closed"
post_password: ""
post_name: "88-revision-v1"
to_ping: ""
pinged: ""
post_modified: "2013-09-20 18:58:08"
post_modified_gmt: "2013-09-20 22:58:08"
post_content_filtered: ""
post_parent: 88
guid: "http://feedwordpress.radgeek.com/?rev=47d0efa72f4896d9bbf95862c7155d44"
menu_order: 0
post_type: "revision"
post_mime_type: ""
comment_count: 0
