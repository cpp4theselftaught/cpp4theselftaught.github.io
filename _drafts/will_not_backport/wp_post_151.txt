ID: 168
post_author: 1
post_date: "2014-09-04 22:17:43"
post_date_gmt: "2014-09-05 02:17:43"
post_content: "n<div class="topsy_widget_data topsy_theme_blue" style="float: right;margin-left: 0.75em; background: url(data:,%7B%20%22url%22%3A%20%22http%253A%252F%252Frlc.vlinder.ca%252Fblog%252F2014%252F09%252Foptimization-by-puzzle%252F%22%2C%20%22shorturl%22%3A%20%22http%3A%2F%2Fbit.ly%2F1nzpGgz%22%2C%20%22style%22%3A%20%22big%22%2C%20%22title%22%3A%20%22Optimization%20by%20puzzle%20%23optimization%22%20%7D);"></div>n<p>Given a <code>query</code> routine that takes a name and may return several, write a routine that takes a single name and returns a set of names for which each of the following is true:n<ol>n<li>For each name in the set, <code>query</code> has been called exactly once.</li>n<li>All the results from the calls to <code>query</code> are included in the set</li>n<li>the parameter to the routine is not included in the set</li>n</ol>n<p>You may assume the following:n<ol>n<li>Calls to <code>query</code> are idempotent<sup><a href="http://rlc.vlinder.ca/blog/2014/09/optimization-by-puzzle/#footnote_0_3274" id="identifier_0_3274" class="footnote-link footnote-identifier-link" title="so you really do need to call them only once">1</a></sup>.</li>n<li>There is a finite number of values for names.</li>n<li>Names are less-than-comparable value-types (i.e. you can store them in an <code>std::set</code>) and are not expensive to copy</li>n<li><code>query</code> results never contain their argument<sup><a href="http://rlc.vlinder.ca/blog/2014/09/optimization-by-puzzle/#footnote_1_3274" id="identifier_1_3274" class="footnote-link footnote-identifier-link" title="i.e. for the case at hand, we&rsquo;re querying a directed acyclic graph, so our first argument will never be seen in any of the query results, although any given value may appear more than once in query results">2</a></sup></li>n</ol>n<p><span id="more-3274"></span></p>n<p>This is almost exactly the problem I had to solve recently: a tool was taking several minutes to perform a routine task that, in my opinion, should take milliseconds. Several other issues were involved as well, but this one has the bonus of being fun.</p>n<p>I should make this an interview question.</p>n<p>The way this ends up working is as follows:</p>n<ol>n<li>We create three sets: one for the <code>results</code>, one for the things we&#8217;ve <code>checked</code> and one for the things that remain <code>to_check</code>.</li>n<li>We insert the value we got as a parameter in the <code>to_check</code> set.</li>n<li>As long as there are things left to check:n<ol>n<li>run <code>query</code> for each value in <code>to_check</code></li>n<li>insert the results from the query in the <code>results</code> set</li>n<li>After iterating over each of the values, insert the values from <code>to_check</code> into the <code>checked</code> set,</li>n<li>clear the <code>to_check</code> set</li>n<li>fill <code>to_check</code> with the set difference between the <code>results</code> and the <code>checked</code> sets</li>n</ol>n</li>n</ol>n<p>Or, in C++:</p>nn<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>30n31n32n33n34n35n36n37n38n39n40n41n42n43n44n45n46n47n48n49n50n</pre></td><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">typename</span> T, <span style="color: #0000ff;">typename</span> F <span style="color: #000080;">&gt;</span>nset<span style="color: #000080;">&lt;</span> T <span style="color: #000080;">&gt;</span> foo<span style="color: #008000;">&#40;</span>T t, F query<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n set<span style="color: #000080;">&lt;</span> T <span style="color: #000080;">&gt;</span> results<span style="color: #008080;">;</span>n set<span style="color: #000080;">&lt;</span> T <span style="color: #000080;">&gt;</span> checked<span style="color: #008080;">;</span>n set<span style="color: #000080;">&lt;</span> T <span style="color: #000080;">&gt;</span> to_check<span style="color: #008080;">;</span>n to_check.<span style="color: #007788;">insert</span><span style="color: #008000;">&#40;</span>t<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n&nbsp;n <span style="color: #0000ff;">do</span> n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">for</span> <span style="color: #008000;">&#40;</span><span style="color: #0000ff;">typename</span> set<span style="color: #000080;">&lt;</span> T <span style="color: #000080;">&gt;</span><span style="color: #008080;">::</span><span style="color: #007788;">const_iterator</span> check<span style="color: #008000;">&#40;</span>to_check.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span> check <span style="color: #000040;">!</span><span style="color: #000080;">=</span> to_check.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span> <span style="color: #000040;">++</span>check<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">typename</span> F<span style="color: #008080;">::</span><span style="color: #007788;">result_type</span> query_results<span style="color: #008000;">&#40;</span>query<span style="color: #008000;">&#40;</span><span style="color: #000040;">*</span>check<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n results.<span style="color: #007788;">insert</span><span style="color: #008000;">&#40;</span>query_results.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, query_results.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n checked.<span style="color: #007788;">insert</span><span style="color: #008000;">&#40;</span>to_check.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, to_check.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n to_check.<span style="color: #007788;">clear</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n set_difference<span style="color: #008000;">&#40;</span>results.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, results.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, checked.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, checked.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, inserter<span style="color: #008000;">&#40;</span>to_check, to_check.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span> <span style="color: #0000ff;">while</span> <span style="color: #008000;">&#40;</span><span style="color: #000040;">!</span>to_check.<span style="color: #007788;">empty</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> results<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span></pre></td></tr></table></div>nn<p>Insertion into a set is <img src='http://s0.wp.com/latex.php?latex=O%28%5Clg%7Bn%7D%29&#038;bg=ffffff&%23038;fg=000000&%23038;s=0' alt='O(\lg{n})' title='O(\lg{n})' class='latex' /> so lines 43 and 45 are both <img src='http://s0.wp.com/latex.php?latex=O%28n%5Clg%7Bn%7D%29&#038;bg=ffffff&%23038;fg=000000&%23038;s=0' alt='O(n\lg{n})' title='O(n\lg{n})' class='latex' />. Line 46 should be <img src='http://s0.wp.com/latex.php?latex=O%28c%29&#038;bg=ffffff&%23038;fg=000000&%23038;s=0' alt='O(c)' title='O(c)' class='latex' /> but is probably <img src='http://s0.wp.com/latex.php?latex=O%28n%29&#038;bg=ffffff&%23038;fg=000000&%23038;s=0' alt='O(n)' title='O(n)' class='latex' />. Line 47 is <img src='http://s0.wp.com/latex.php?latex=O%28n%29&#038;bg=ffffff&%23038;fg=000000&%23038;s=0' alt='O(n)' title='O(n)' class='latex' /> so the whole things boils down to <img src='http://s0.wp.com/latex.php?latex=O%28n%5Clg%7Bn%7D%29&#038;bg=ffffff&%23038;fg=000000&%23038;s=0' alt='O(n\lg{n})' title='O(n\lg{n})' class='latex' /> complexity.</p>n<p>In order to play with the code a bit, I put it on GitHub as a Gist, with a test case (Query fails if you call it more than once with the same value): <script src="https://gist.github.com/blytkerchan/677120f2d23c6a0505dc.js"></script></p>nn<ol class="footnotes"><li id="footnote_0_3274" class="footnote">so you really do need to call them only once</li><li id="footnote_1_3274" class="footnote">i.e. for the case at hand, we&#8217;re querying a directed acyclic graph, so our first argument will never be seen in any of the <code>query</code> results, although any given value may appear more than once in <code>query</code> results</li></ol>"
post_title: "Optimization by puzzle"
post_excerpt: "Given a query routine that takes a name and may return several, write a routine that takes a single name and returns a set of names for which each of the following is true: For each name in the set, &hellip; <a href="http://rlc.vlinder.ca/blog/2014/09/optimization-by-puzzle/">Continue reading <span>&rarr;</span></a>"
post_status: "inherit"
comment_status: "closed"
ping_status: "closed"
post_password: ""
post_name: "121-revision-v1"
to_ping: ""
pinged: ""
post_modified: "2014-09-04 22:17:43"
post_modified_gmt: "2014-09-05 02:17:43"
post_content_filtered: ""
post_parent: 121
guid: "http://feedwordpress.radgeek.com/?rev=acf2a2b7e1ddf47b31df2340acc227f0"
menu_order: 0
post_type: "revision"
post_mime_type: ""
comment_count: 0
