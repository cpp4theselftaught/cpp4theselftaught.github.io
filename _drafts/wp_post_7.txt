—
post_date: “2012-08-14 13:18:57”
post_date_gmt: “2012-08-14 17:18:57”
title: “A generic circular buffer”
—

This is one of those things that I find myself writing fairly often: it’s part of LL(k) parsers (which I’ll talk about at some point on this site) and a similar pattern (a circular queue) is often found in inter-thread communication.

A circular buffer is a fixed-size buffer into which you can put pretty much anything (we’ll look at the requirements for something you can put into this one in a moment) which has a few advantages:

1. **Being of fixed size, all the data is (or can be) pre-allocated**. This is especially important in embedded systems, where run-time allocation is often seen as a no-no
2. **Being a class template, you can re-use it in many different contexts**. This particular class template takes three parameters: the type of “payload”, the number of entries in the circular buffer and the alignment type. In practice, this is really all you need in a class template such as this one.

== Memory pre-allocation

One of the interesting things about this class template is that we don’t require the type we store to be default-constructible. I.e., for a given `T` the following code need not compile:
```
T t;
```
The magic that allows us to do this consists of three parts:

1. ***placement new*** which tells the compiler that we want to construct an object without allocating memory for it (because we’re providing the memory ourselves)

2. a `union` which we use for **alignment**

3. an **array** of instances of that union, which we use to pre-allocate all the memory we need for our circular buffer.

Let’s start by looking at the last two: the union and the array:

```
union Value
{
    A alignment_;
    unsigned char data_[sizeof(T)];
};
Value values_[size__];
```

In this little bit of code, there are three parameters which all happen to be parameters to our class template which, by the way, looks like this:

```
template < typename T, unsigned long size__, typename A = double >
class CircularBuffer
```

The `T` parameter is the type we’re storing. We don’t know much about it, but we know that like anything, we need to align it properly when it’s allocated. What “properly” means depends on what the type is, but there is nothing that can tell us what that is, so we have to make an assumption — that in most cases, `double` will be fine: when your CPU addresses an object, it reads the memory into a cache and tries to do so efficiently. To do that, it reads it a *word* at a time. The *word size* (size of a *word*) depends on the architecture. CPUs (all CPUs I know of) can load a word that’s aligned to a word-size boundary, a half-word aligned to the size of half a word, etc. In this context, that means the address of a two-byte object is a multiple of two, the address of an eight-byte object is a multiple of eight, etc. While these details are usually left to the memory allocator (which is part of the standard library) and the compiler, that only works when we do a `new T` or allocate a `T` on the stack or as part of another object. When writing your own allocator or, as we are now doing, pre-allocating storage for an object, we have to give the compiler a hint as to the required alignment of the objects, which we do in this case with our union.

So with our union, we tell the compiler that every entry in the array should be aligned to a boundary suitable for `A`, which is a parameter to our class template which defaults to `double` — which is why we assume `double` will be OK in most cases. We also tell the compiler that each entry in the array should be large enough to hold either a `T` (or rather: something with the size of `T`) or a `double`.

Note that this is one of the reasons why `A` is configurable: while there are very few types that would go awry if aligned to something `sizeof(double)`, there are many things that are smaller than a `double` that would still be useful to put in a circular buffer — `int`, for example. If you want a `CircularBuffer< int, 7 >` not to waste <code>7 * (sizeof(double) - sizeof(int))</code> you can define it as `CircularBuffer< int, 7, int >` to make the type of `A` smaller and lose the unnecessary overhead.
