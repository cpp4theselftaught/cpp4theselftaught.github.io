ID: 59
post_author: 1
post_date: "2011-08-05 13:59:38"
post_date_gmt: "2011-08-05 18:59:38"
post_content: "n<div class="topsy_widget_data topsy_theme_blue" style="float: right;margin-left: 0.75em; background: url(data:,%7B%20%22url%22%3A%20%22http%253A%252F%252Frlc.vlinder.ca%252Fblog%252F2011%252F08%252Fa-few-final-word-on-functional-programming%252F%22%2C%20%22shorturl%22%3A%20%22http%3A%2F%2Fbit.ly%2Foz7VH8%22%2C%20%22style%22%3A%20%22big%22%2C%20%22title%22%3A%20%22A%20few%20final%20words%20on%20functional%20programming%22%20%7D);"></div>n<p> <audio id="wp_mep_4" controls="controls" src="http://vlinder.ca/podcasts/32-fp-final.mp3" preload="none" class="mejs-player " data-mejsoptions='{"features":["playpause","current","progress","duration","volume","tracks","fullscreen"],"audioWidth":400,"audioHeight":30}'>n n <object width="400" height="30" type="application/x-shockwave-flash" data="http://rlc.vlinder.ca/wp-content/plugins/media-element-html5-video-and-audio-player/mediaelement/flashmediaelement.swf">n <param name="movie" value="http://rlc.vlinder.ca/wp-content/plugins/media-element-html5-video-and-audio-player/mediaelement/flashmediaelement.swf" />n <param name="flashvars" value="controls=true&amp;file=http://vlinder.ca/podcasts/32-fp-final.mp3" /> n </object> n </audio>The previous two installments of C++ for the self-taught were both about functional programming. Before we get back to Chausette, I&#8217;ll put in a few final words on the topic, combining both run-time functional programming with compile-time functional programming and, while we&#8217;re at it, language and meta-language design.</p>n<p>This is fun stuff, but if you want to understand everything I will talk about in this installment you&#8217;ll have a bit of studying to do. In the code I will present in this installment we will use:n<ul>n<li>symbol tables</li>n<li>parsers</li>n<li>expression templates</li>n<li>the Backus-Naur Form (BNF)</li>n<li>iterators</li>n<li>the Factory Method pattern</li>n</ul>n<p><span id="more-1600"></span><br />nA few days ago, I received a message over Twitter by @<a href="http://twitter.com/pauldoo" title="@paultoo" >pauldoo</a>:<br />n<iframe src="http://bettween.com/conversations/embed?user1=blytkerchan&#038;user2=pauldoo&%23038;date1=Aug-06-2011&%23038;date2=Aug-08-2011&%23038;order=desc&%23038;mainBackgroundColor=30728d&%23038;headerFooterColor=ffffff&%23038;borderColor=e2e2e2&%23038;tweetColor=333333&%23038;tweetBackgroundColor=ffffff&%23038;tweetDetailColor=999999&%23038;detailColor=333333&%23038;detailBackgroundColor=ffffff&%23038;fontSize=11&%23038;width=100&%23038;height=189" frameborder="0" framespacing="0" scrolling="no" height="300" width="100%" border="0"><br />n</iframe></p>n<p>I was already pondering what I might put in the &#8220;few final words on functional programming&#8221; post and I like to lend a helping hand when I can, so I decided to do just that when he sent me a follow-up E-mail.</p>n<h2>Grammar &#038; BNF</h2>n<p>What he wanted to do is parse expressions in a lisp-y functional language. To do that, he had defined a simple grammar that, in BNF, would look a bit like this:</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="bnf" style="font-family:monospace;">expression <span style="color: #006600; font-weight: bold;">::=</span> <span style="">&#40;</span> list <span style="">&#41;</span>nlist <span style="color: #006600; font-weight: bold;">::=</span> list_item+nlist_item <span style="color: #006600; font-weight: bold;">::=</span> STRING <span style="color: #006600; font-weight: bold;">|</span> DOUBLE <span style="color: #006600; font-weight: bold;">|</span> expression</pre></td></tr></table></div>nn<div class="aside-toggler open"><span class="open-aside">To see the <em>Aside</em> click here.</span><span class="close-aside">To hide the <em>Aside</em> click here.</span>n </div><div class="bnsia aside open">BNF is the Backus-Naur Form. It is a standard way of writing up the grammar of a language</div>n<p>BNF consists of <em>terminals</em>, which are tokens, and <em>non-terminals</em> which are groups of tokens that, together, have a meaning. In this grammar, the terminals are <code>(</code> and <code>)</code> &#8212; the parenthesis characters &#8212; and the multi-character <code>STRING</code> and <code>DOUBLE</code> tokens. Strings are basically sequences of ASCII characters whereas doubles are what you would normally expect a C compiler to interpret as a floating-point constant.</p>n<p>The non-terminals in this grammar are <code>list</code>, which consists of one or more <code>list_item</code>s; <code>list_item</code>, which is either a string, a double, or an expression, and <code>expression</code>, which is a list between parentheses.</p>n<p>Note that the grammar <em>doesn&#8217;t</em> tell you that the strings in the grammar are intended to be function names and the doubles are intended to be constants. In that sense, the language being described here is a lot like the original version of <a href="http://funky.vlinder.ca/" title="The Funky Functional Embeddable programming language" >Funky</a>.</p>n<p>When you want to write a parser for something, you first have to have a good grasp of two important things: the first is the grammar, which we&#8217;ve just discussed; the second is what the grammar means. In this case, what the grammar means is that we have some kind of operator &#8212; which is the first thing after the opening parenthesis &#8212; which is followed by whatever it operates on: a possibly-empty list of values and expressions. Those expressions could be recursively evaluated and the results of those evaluations used as values in the surrounding expression, such that <code>(+ 1 (+ 1 1))</code> becomes equivalent to <code>(+ 1 2)</code> which in turn becomes equivalent to <code>3</code>, so there is no need to treat expressions any differently from other values, where the surrounding expression is concerned.</p>n<p>That means that we can model the expression itself as follows:</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #0000ff;">struct</span> Expression<span style="color: #008080;">;</span>n<span style="color: #0000ff;">typedef</span> variant<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">double</span>, Expression <span style="color: #000080;">&gt;</span> ListItem<span style="color: #008080;">;</span>n<span style="color: #0000ff;">typedef</span> vector<span style="color: #000080;">&lt;</span> ListItem <span style="color: #000080;">&gt;</span> List<span style="color: #008080;">;</span>n<span style="color: #0000ff;">struct</span> Expressionn<span style="color: #008000;">&#123;</span>n Operator operator_<span style="color: #008080;">;</span>n List list_<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span></pre></td></tr></table></div>nn<p>That is: an expression consists of an <em>operator</em> and a <em>list</em> of operands. Each one of those operands is either a <code>double</code> or an <code>Expression</code>. While we&#8217;re at it, we might as well include strings and integers in the mix of possible operands &#8212; so as to make our new little language a bit more useful &#8212; and model a ListItem as <code>typedef variant< int, double, string, Expression > ListItem;</code></p>n<h2>Evaluating an expression</h2>n<p>Now, evaluating an expression becomes a question of evaluating any sub-expressions until only values are left, and then applying the right operator to those values. This is typical of functional programming: recursion.</p>n<p>Let&#8217;s say we define four operators for now: plus, minus, multiply and divide. We also have three primitive types: integers, doubles and strings. That means we have up to twelve functions to implement &#8211; one for each combination of operator and type. We&#8217;ll only implement them if they make sense, though, so we won&#8217;t multiply or divide strings. <div class="aside-toggler open"><span class="open-aside">To see the <em>Aside</em> click here.</span><span class="close-aside">To hide the <em>Aside</em> click here.</span>n </div><div class="bnsia aside open">Note, by the way, that we don&#8217;t have expressions as &#8220;primitive types&#8221; here: by the time we will want to apply the operators to the operands, the sub-expressions will all have been evaluated.</div></p>n<p>The following chunk of code is rather long, but it does the evaluation of an expression:</p>nn<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1n2n3n4n5n6n7n8n9n10n11n12n13n14n15n16n17n18n19n20n21n22n23n24n25n26n27n28n29n30n31n32n33n34n35n36n37n38n39n40n41n42n43n44n45n46n47n48n49n50n51n52n53n</pre></td><td class="code"><pre class="cpp" style="font-family:monospace;">ListItem evaluate<span style="color: #008000;">&#40;</span>Expression <span style="color: #000040;">&amp;</span>expression<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n ListItemType result_type<span style="color: #008000;">&#40;</span>int__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n ListItem retval<span style="color: #008080;">;</span>n <span style="color: #666666;">// first pass: evaluate any sub-expressions</span>n <span style="color: #0000ff;">for</span> <span style="color: #008000;">&#40;</span>List<span style="color: #008080;">::</span><span style="color: #007788;">iterator</span> iter<span style="color: #008000;">&#40;</span>expression.<span style="color: #007788;">list_</span>.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span> iter <span style="color: #000040;">!</span><span style="color: #000080;">=</span> expression.<span style="color: #007788;">list_</span>.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span> <span style="color: #000040;">++</span>iter<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>iter<span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>which<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> expression__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #000040;">*</span>iter <span style="color: #000080;">=</span> evaluate<span style="color: #008000;">&#40;</span>get<span style="color: #000080;">&lt;</span> Expression <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span><span style="color: #000040;">*</span>iter<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">switch</span> <span style="color: #008000;">&#40;</span>iter<span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>which<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">case</span> int__ <span style="color: #008080;">:</span>n <span style="color: #666666;">// this is the default type - it doesn't change anything</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">case</span> double__ <span style="color: #008080;">:</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>result_type <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n result_type <span style="color: #000080;">=</span> double__<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* either already a double, or it's a string */</span> <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">case</span> string__ <span style="color: #008080;">:</span>n result_type <span style="color: #000080;">=</span> string__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">default</span> <span style="color: #008080;">:</span>n <span style="color: #0000ff;">throw</span> logic_error<span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;unexpected operand type&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">switch</span> <span style="color: #008000;">&#40;</span>result_type<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">case</span> int__ <span style="color: #008080;">:</span>n <span style="color: #666666;">// nothing to do in this case: this is the default for the variant, and it will be zero-initialized</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">case</span> double__ <span style="color: #008080;">:</span>n retval <span style="color: #000080;">=</span> <span style="color:#800080;">0.0</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">case</span> string__ <span style="color: #008080;">:</span>n retval <span style="color: #000080;">=</span> string<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">default</span> <span style="color: #008080;">:</span>n <span style="color: #0000ff;">throw</span> logic_error<span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;Unexpected result type&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n boost<span style="color: #008080;">::</span><span style="color: #007788;">shared_ptr</span><span style="color: #000080;">&lt;</span> Accumulator <span style="color: #000080;">&gt;</span> accumulator <span style="color: #000080;">=</span> getAccumulator<span style="color: #008000;">&#40;</span>retval, expression.<span style="color: #007788;">operator_</span>, result_type<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">for</span> <span style="color: #008000;">&#40;</span>List<span style="color: #008080;">::</span><span style="color: #007788;">const_iterator</span> iter<span style="color: #008000;">&#40;</span>expression.<span style="color: #007788;">list_</span>.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span> iter <span style="color: #000040;">!</span><span style="color: #000080;">=</span> expression.<span style="color: #007788;">list_</span>.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span> <span style="color: #000040;">++</span>iter<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #008000;">&#40;</span><span style="color: #000040;">*</span>accumulator<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #000040;">*</span>iter<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n&nbsp;n <span style="color: #0000ff;">return</span> retval<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span></pre></td></tr></table></div>nn<p>In lines 6 through 31 of this code, all the sub-expressions are evaluated (lines 8 through 11) and the return type of the current expression is determined. Basically that determination goes like this: if all the operands are integers, the return type is an integer. If one or more of the operands is a <code>double</code> (and none are strings, so the operands are a mix of integers and doubles with at least done double), the return type is a <code>double</code>. If any of the operands is a string, the return type is a string.</p>n<p>In lines 32 to 45, the result value is initialized according to its determined type: either an integer zero, a floating-point zero or an empty string.</p>n<p>In line 46, we call a factory method to get the accumulator functor. We will look into that a little later.</p>n<p>In lines 47 through 50, the accumulator functor is called for every operands of the current operator. The result of this is transparently stored in <code>retval</code>, which is returned in line 52.</p>n<h2>The Factory Method</h2>n<p>The Factory Method is an often-used design pattern which allows you to implement a factory as a single function. In our case, we could have done this a bit more eloquently that I actually did &#8212; so feel free to optimize.</p>n<p>Here&#8217;s the code, including the <code>Accumulator</code> class:</p>nn<div class="wp_syntax"><table><tr><td class="line_numbers"><pre>1n2n3n4n5n6n7n8n9n10n11n12n13n14n15n16n17n18n19n20n21n22n23n24n25n26n27n28n29n30n31n32n33n34n35n36n37n38n39n40n41n42n43n44n45n46n47n48n49n50n51n52n53n54n55n56n57n58n59n60n61n62n63n64n65n66n67n68n69n70n71n72n73n74n75n76n77n78n79n80n81n82n83n84n85n86n87n88n89n90n91n92n93n94n95n96n97n98n99n100n101n102n103n104n105n106n107n108n109n110n111n112n113n114n115n</pre></td><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #0000ff;">struct</span> Accumulatorn<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">virtual</span> ~Accumulator<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span><span style="color: #008000;">&#125;</span>n&nbsp;n <span style="color: #0000ff;">virtual</span> Accumulator<span style="color: #000040;">*</span> create<span style="color: #008000;">&#40;</span>ListItem <span style="color: #000040;">&amp;</span>result<span style="color: #008000;">&#41;</span> <span style="color: #0000ff;">const</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>n&nbsp;n <span style="color: #0000ff;">const</span> Accumulator<span style="color: #000040;">&amp;</span> operator<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span>list_item<span style="color: #008000;">&#41;</span> <span style="color: #0000ff;">const</span>n <span style="color: #008000;">&#123;</span>n call_<span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> <span style="color: #000040;">*</span><span style="color: #0000dd;">this</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n&nbsp;n ListItem operator<span style="color: #000040;">*</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #0000ff;">const</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> <span style="color: #000040;">*</span>result_<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n&nbsp;n<span style="color: #0000ff;">protected</span> <span style="color: #008080;">:</span>n <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">void</span> call_<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span>list_item<span style="color: #008000;">&#41;</span> <span style="color: #0000ff;">const</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>n&nbsp;n Accumulator<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008080;">:</span> result_<span style="color: #008000;">&#40;</span><span style="color: #0000dd;">0</span><span style="color: #008000;">&#41;</span>n , first_<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">true</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* no-op */</span> <span style="color: #008000;">&#125;</span>n&nbsp;n&nbsp;n Accumulator<span style="color: #008000;">&#40;</span>ListItem <span style="color: #000040;">&amp;</span>result<span style="color: #008000;">&#41;</span>n <span style="color: #008080;">:</span> result_<span style="color: #008000;">&#40;</span><span style="color: #000040;">&amp;</span>result<span style="color: #008000;">&#41;</span>n , first_<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">true</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* no-op */</span> <span style="color: #008000;">&#125;</span>n&nbsp;n ListItem <span style="color: #000040;">*</span>result_<span style="color: #008080;">;</span>n mutable <span style="color: #0000ff;">bool</span> first_<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> Operator operator_type__, ListItemType return_type__ <span style="color: #000080;">&gt;</span>n<span style="color: #0000ff;">struct</span> Accumulator_ <span style="color: #008080;">:</span> Accumulatorn<span style="color: #008000;">&#123;</span>n<span style="color: #0000ff;">private</span> <span style="color: #008080;">:</span>n Accumulator_<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* no-op */</span> <span style="color: #008000;">&#125;</span>n&nbsp;n Accumulator_<span style="color: #008000;">&#40;</span>ListItem <span style="color: #000040;">&amp;</span>result<span style="color: #008000;">&#41;</span>n <span style="color: #008080;">:</span> Accumulator<span style="color: #008000;">&#40;</span>result<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* no-op */</span> <span style="color: #008000;">&#125;</span>n&nbsp;n Accumulator_<span style="color: #000040;">*</span> create<span style="color: #008000;">&#40;</span>ListItem <span style="color: #000040;">&amp;</span>result<span style="color: #008000;">&#41;</span> <span style="color: #0000ff;">const</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> <span style="color: #0000dd;">new</span> Accumulator_<span style="color: #008000;">&#40;</span>result<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n&nbsp;n<span style="color: #0000ff;">protected</span> <span style="color: #008080;">:</span>n <span style="color: #ff0000; font-style: italic;">/*virtual */</span><span style="color: #0000ff;">void</span> call_<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span>list_item<span style="color: #008000;">&#41;</span> <span style="color: #0000ff;">const</span><span style="color: #ff0000; font-style: italic;">/* = 0*/</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>first_<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">switch</span> <span style="color: #008000;">&#40;</span>result_<span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>which<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">case</span> int__ <span style="color: #008080;">:</span>n <span style="color: #000040;">*</span>result_ <span style="color: #000080;">=</span> cast<span style="color: #000080;">&lt;</span> int__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">case</span> double__ <span style="color: #008080;">:</span>n <span style="color: #000040;">*</span>result_ <span style="color: #000080;">=</span> cast<span style="color: #000080;">&lt;</span> double__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">case</span> string__ <span style="color: #008080;">:</span>n <span style="color: #000040;">*</span>result_ <span style="color: #000080;">=</span> cast<span style="color: #000080;">&lt;</span> string__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n first_ <span style="color: #000080;">=</span> <span style="color: #0000ff;">false</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #000040;">*</span>result_ <span style="color: #000080;">=</span> Operator_<span style="color: #000080;">&lt;</span> operator_type__, return_type__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">::</span><span style="color: #007788;">apply</span><span style="color: #008000;">&#40;</span><span style="color: #000040;">*</span>result_, list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #008000;">&#125;</span>n&nbsp;n <span style="color: #0000ff;">friend</span> boost<span style="color: #008080;">::</span><span style="color: #007788;">shared_ptr</span><span style="color: #000080;">&lt;</span> Accumulator <span style="color: #000080;">&gt;</span> getAccumulator<span style="color: #008000;">&#40;</span>ListItem <span style="color: #000040;">&amp;</span>result, Operator operator_type, ListItemType return_type<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;nboost<span style="color: #008080;">::</span><span style="color: #007788;">shared_ptr</span><span style="color: #000080;">&lt;</span> Accumulator <span style="color: #000080;">&gt;</span> getAccumulator<span style="color: #008000;">&#40;</span>ListItem <span style="color: #000040;">&amp;</span>result, Operator operator_type, ListItemType return_type<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> plus__, int__ <span style="color: #000080;">&gt;</span> pi_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> plus__, double__ <span style="color: #000080;">&gt;</span> pd_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> plus__, string__ <span style="color: #000080;">&gt;</span> ps_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> minus__, int__ <span style="color: #000080;">&gt;</span> mi_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> minus__, double__ <span style="color: #000080;">&gt;</span> md_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> minus__, string__ <span style="color: #000080;">&gt;</span> ms_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> multiply__, int__ <span style="color: #000080;">&gt;</span> ui_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> multiply__, double__ <span style="color: #000080;">&gt;</span> ud_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> divide__, int__ <span style="color: #000080;">&gt;</span> di_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> divide__, double__ <span style="color: #000080;">&gt;</span> dd_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator<span style="color: #000040;">*</span> accumulators__<span style="color: #008000;">&#91;</span>operator_count__<span style="color: #008000;">&#93;</span><span style="color: #008000;">&#91;</span>list_item_type_count__<span style="color: #008000;">&#93;</span> <span style="color: #000080;">=</span> <span style="color: #008000;">&#123;</span>n <span style="color: #008000;">&#123;</span> <span style="color: #000040;">&amp;</span>pi_accumulator__, <span style="color: #000040;">&amp;</span>pd_accumulator__, <span style="color: #000040;">&amp;</span>ps_accumulator__, <span style="color: #0000dd;">0</span> <span style="color: #008000;">&#125;</span>,n <span style="color: #008000;">&#123;</span> <span style="color: #000040;">&amp;</span>mi_accumulator__, <span style="color: #000040;">&amp;</span>md_accumulator__, <span style="color: #000040;">&amp;</span>ms_accumulator__, <span style="color: #0000dd;">0</span> <span style="color: #008000;">&#125;</span>,n <span style="color: #008000;">&#123;</span> <span style="color: #000040;">&amp;</span>ui_accumulator__, <span style="color: #000040;">&amp;</span>ud_accumulator__, <span style="color: #0000dd;">0</span>, <span style="color: #0000dd;">0</span> <span style="color: #008000;">&#125;</span>,n <span style="color: #008000;">&#123;</span> <span style="color: #000040;">&amp;</span>di_accumulator__, <span style="color: #000040;">&amp;</span>dd_accumulator__, <span style="color: #0000dd;">0</span>, <span style="color: #0000dd;">0</span> <span style="color: #008000;">&#125;</span>n <span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>accumulators__<span style="color: #008000;">&#91;</span>operator_type<span style="color: #008000;">&#93;</span><span style="color: #008000;">&#91;</span>return_type<span style="color: #008000;">&#93;</span> <span style="color: #000040;">!</span><span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> boost<span style="color: #008080;">::</span><span style="color: #007788;">shared_ptr</span><span style="color: #000080;">&lt;</span> Accumulator <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>accumulators__<span style="color: #008000;">&#91;</span>operator_type<span style="color: #008000;">&#93;</span><span style="color: #008000;">&#91;</span>return_type<span style="color: #008000;">&#93;</span><span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>create<span style="color: #008000;">&#40;</span>result<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>operator_type <span style="color: #000080;">==</span> multiply__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">throw</span> logic_error<span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;Don't know how to multiply a string&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">throw</span> logic_error<span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;Don't know how to divide a string&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span></pre></td></tr></table></div>nn<p>As you an see, there are ten <code>static</code> instances of accumulators inside the <code>getAccumulator</code> function. None of these is ever made available to a called, however, because none of them is capable of doing the job of an <code>Accumulator</code>. That&#8217;s because they don&#8217;t have a valid value in the <code>result_</code> member, which they need to accumulate into.</p>n<p>The <code>getAccumulator</code> function assumes that it won&#8217;t be called for any non-existent operators or list-item types and that it won&#8217;t be called for divisions or multiplications of strings. It will attempt to diagnose the latter condition, but in any case it will throw a <code>logic_error</code> when it is called incorrectly.</p>n<p>Of course, what this really does is map a dynamic type to a static one: the ten instances are pointed to by an array of pointers, from which the appropriate one is taken according to the parameters passed to the function. That instance creates a new instance of its own type which, in turn, can be used as a real accumulator.</p>n<h2>Traits and policies</h2>n<p>Once we have a static type, we should no longer need to bother finding out what to do with the types we need. That means that we should now be able to use C++&#8217;s type system to find out how to implement a given operator for the types we&#8217;d been given earlier. We do that with a policy class, that looks like this:</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> Operator operator__, ListItemType return_type__ <span style="color: #000080;">&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #008080;">;</span></pre></td></tr></table></div>nn<p>We will need a specialization for every valid combination of operator and return type, which means we need ten policies in total:</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> plus__, int__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> plus__, double__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> plus__, string__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> minus__, int__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> minus__, double__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> minus__, string__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> divide__, int__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> divide__, double__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> multiply__, int__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> multiply__, string__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">;</span></pre></td></tr></table></div>nn<p>Each of these can assume that the left-hand-side operand is already of the right type, but may potentially have to cast the right-hand side &#8212; except for the ones that deal with integers, which always have integers on both sides. That means we need something to cast our variants &#8212; something that looks like this:n<pre>template < ListItemType target_list_item_type__ >nunspecified cast(const ListItem &#038; list_item);</pre>n<p>The caveat is, ofcourse, the &#8220;unspecified&#8221; bit: we need to tell the compiler which type <code>cast</code> will return for each <code>ListItemType</code> value. We can easily do that with a little meta-function:</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> ListItemType target_list_item_type__ <span style="color: #000080;">&gt;</span>n<span style="color: #0000ff;">struct</span> get_cast_target_type<span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> get_cast_target_type<span style="color: #000080;">&lt;</span> int__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">typedef</span> <span style="color: #0000ff;">int</span> type<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> get_cast_target_type<span style="color: #000080;">&lt;</span> double__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">typedef</span> <span style="color: #0000ff;">double</span> type<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> get_cast_target_type<span style="color: #000080;">&lt;</span> string__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">typedef</span> string type<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span></pre></td></tr></table></div>nn<p>This means that we can now declare the <code>cast</code> function as follows:</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> ListItemType target_list_item_type__ <span style="color: #000080;">&gt;</span>n<span style="color: #ff0000; font-style: italic;">/*unspecified*/</span><span style="color: #0000ff;">typename</span> get_cast_target_type<span style="color: #000080;">&lt;</span> target_list_item_type__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">::</span><span style="color: #007788;">type</span> cast<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span> list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span></pre></td></tr></table></div>nn<p>and specialize it like this:</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> <span style="color: #000080;">&gt;</span>n<span style="color: #0000ff;">int</span> cast<span style="color: #000080;">&lt;</span> int__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span> list_item<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> <span style="color: #000080;">&gt;</span>n<span style="color: #0000ff;">double</span> cast<span style="color: #000080;">&lt;</span> double__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span> list_item<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span> <span style="color: #000040;">||</span> <span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> double__<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> double__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">double</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">static_cast</span><span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">double</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> <span style="color: #000080;">&gt;</span>nstring cast<span style="color: #000080;">&lt;</span> string__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span> list_item<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">!</span><span style="color: #000080;">=</span> expression__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> string__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> get<span style="color: #000080;">&lt;</span> string <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> lexical_cast<span style="color: #000080;">&lt;</span> string <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> double__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> lexical_cast<span style="color: #000080;">&lt;</span> string <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">double</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span></pre></td></tr></table></div>nn<h2>Writing the parser</h2>n<p>Now that we know what we want to parse <em>into</em> &#8212; an expression &#8212; we can decide how to parse. We already have the grammar, so we can now try to express it in code.</p>n<p><a href="http://spirit.sf.net/" title="Boost Spirit project page" >Boost.Spirit</a> is a template library that allows you to generate parsers from a BNF-like meta-language expressed in C++. It uses expression templates extensively to allow you to put BNF in your code and generate a parser from that code.<div class="aside-toggler open"><span class="open-aside">To see the <em>Aside</em> click here.</span><span class="close-aside">To hide the <em>Aside</em> click here.</span>n </div><div class="bnsia aside open"><iframe src="http://en.wikipedia.org/w/index.php?title=Expression_templates&#038;printable=yes" width="100%" height="200px"></iframe></div></p>n<p>Let&#8217;s first have a closer look at the BNF we will want to express: it has changed a bit since the beginning of this post as we&#8217;re no longer looking strictly at what @pauldoo wanted to achieve with his grammar. The new grammar now looks a bit like this:n<pre>expression ::= ( OPERATOR list )nlist ::= list_item+nlist_item ::= expressionn | INTEGERn | DOUBLEn | STRING</pre>n<p>An <code>OPERATOR</code> is one of the following characters: <code>+</code> <code>-</code> <code>*</code> <code>/</code>; and a <code>STRING</code> is a double quote, followed by zero or more escaped characters (\a, \b, \f, \n, \r, \t, \v, \\, \&#8217;, \&#8221;) or hex characters (\xHH where HH is a hexadecimal code) or characters that are not double quotes; followed by a double quote; an <code>INTEGER</code> is one or more numerical characters; and a <code>DOUBLE</code> is zero or more numerical characters followed by a dot followed by one or more numerical characters.</p>n<p>The fun thing with Boost.Spirit is that you can express something like this directly in code:</p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;">expression_ <span style="color: #000080;">=</span> <span style="color: #FF0000;">'('</span> <span style="color: #000080;">&gt;&gt;</span> operator_ <span style="color: #000080;">&gt;&gt;</span> list_ <span style="color: #000080;">&gt;&gt;</span> <span style="color: #FF0000;">')'</span>n <span style="color: #008080;">;</span>noperator_.<span style="color: #007788;">add</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;+&quot;</span>, plus__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;-&quot;</span>, minus__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;*&quot;</span>, multiply__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;/&quot;</span>, divide__<span style="color: #008000;">&#41;</span>n <span style="color: #008080;">;</span>nlist_ <span style="color: #000080;">=</span> <span style="color: #000040;">+</span>list_item_n <span style="color: #008080;">;</span>nlist_item_ <span style="color: #000080;">=</span> expression_n <span style="color: #000040;">|</span> qi<span style="color: #008080;">::</span><span style="color: #007788;">int_</span>n <span style="color: #000040;">|</span> qi<span style="color: #008080;">::</span><span style="color: #007788;">double_</span>n <span style="color: #000040;">|</span> string_n <span style="color: #008080;">;</span>nstring_ <span style="color: #000080;">=</span> lexeme<span style="color: #008000;">&#91;</span><span style="color: #FF0000;">'&quot;'</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #000040;">*</span><span style="color: #008000;">&#40;</span>unescape_char_ <span style="color: #000040;">|</span> <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>x&quot;</span> <span style="color: #000080;">&gt;&gt;</span> qi<span style="color: #008080;">::</span><span style="color: #007788;">hex</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">|</span> <span style="color: #008000;">&#40;</span>qi<span style="color: #008080;">::</span><span style="color: #007788;">char_</span> <span style="color: #000040;">-</span> qi<span style="color: #008080;">::</span><span style="color: #007788;">char_</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">'&quot;'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #FF0000;">'&quot;'</span><span style="color: #008000;">&#93;</span>n <span style="color: #008080;">;</span>nunescape_char_.<span style="color: #007788;">add</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>a&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\a</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>b&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\b</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>f&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\f</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>n&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\n</span>'</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>r&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\r</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>t&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\t</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>v&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\v</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span><span style="color: #000099; font-weight: bold;">\\</span>&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\\</span>'</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span><span style="color: #000099; font-weight: bold;">\'</span>&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\'</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span><span style="color: #000099; font-weight: bold;">\&quot;</span>&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\&quot;</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span></pre></td></tr></table></div>nn<p>As you can see, Boost.Spirit must have overloaded a ton of operators to be able to do this. The point is, though, that with only very little additional boilerplate code (we have to declare the variables being used here) we have a working parser.</p>n<p>Note that both <code>operator_</code> and <code>unescape_char_</code> are <em>symbol tables</em>: they map a given character or string value to another value, possibly of a different type. Also note that each of these parsers provides an analogous structure as a result of its parse (if successful), so <code>list_</code> yields a <code>vector< ListItem ></code>, a.k.a. a <code>List</code>; <code>string_</code> yields a <code>std::string</code>, etc.</p>n<p>So, here&#8217;s all of the code of a parser and evaluator for the little language we&#8217;ve just designed: <a href="http://ideone.com/iJYEV" title="Code on IDEOne.com" >on IDEOne.com</a><div class="aside-toggler closed"><span class="open-aside">Show code</span><span class="close-aside">hide code</span>n </div><div class="bnsia aside closed"></p>nn<div class="wp_syntax"><table><tr><td class="code"><pre class="cpp" style="font-family:monospace;"><span style="color: #ff0000; font-style: italic;">/* Copyright (c) 2011, Ronald Landheer-Cieslak &lt;rlc at vlinder dot ca&gt;n 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml All rights reserved.n 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml n 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml Redistribution and use in source and binary forms, with or withoutn 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml modification, are permitted provided that the following conditions are met:n 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml Redistributions of source code must retain the above copyrightn 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml notice, this list of conditions and the following disclaimer.n 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml Redistributions in binary form must reproduce the above copyrightn 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml notice, this list of conditions and the following disclaimer in then 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml documentation and/or other materials provided with the distribution.n 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml Neither the name of the Vlinder Software nor the name of Ronald n 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml Landheer-Cieslak names of its contributors may be used to endorse or n 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml promote products derived from this software without specific prior n 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml written permission.n 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml n 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; ANDn 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIEDn 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AREn 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml DISCLAIMED. IN NO EVENT SHALL RONALD LANDHEER-CIESLAK BE LIABLE FOR ANYn 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGESn 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;n 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED ANDn 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORTn 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THISn 2017-10-14-new-website.md 2017-10-14-new-website.md~ split.sh split.sh~ wp_post_10.txt wp_post_11.txt wp_post_12.txt wp_post_13.txt wp_post_14.txt wp_post_15.txt wp_post_16.txt wp_post_17.txt wp_post_18.txt wp_post_19.txt wp_post_1.yml wp_post_20.txt wp_post_21.txt wp_post_22.txt wp_post_23.txt wp_post_24.txt wp_post_25.txt wp_post_26.txt wp_post_27.txt wp_post_28.txt wp_post_29.txt wp_post_2.txt wp_post_30.txt wp_post_31.txt wp_post_32.txt wp_post_33.txt wp_post_34.txt wp_post_35.txt wp_post_36.txt wp_post_37.txt wp_post_38.txt wp_post_39.txt wp_post_3.txt wp_post_40.txt wp_post_41.txt wp_post_42.txt wp_post_43.txt wp_post_44.txt wp_post_45.txt wp_post_46.txt wp_post_47.txt wp_post_48.txt wp_post_4.txt wp_post_5.txt wp_post_6.txt wp_post_7.txt wp_post_8.txt wp_post_9.txt wp_posts.yml SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGEn */</span>n<span style="color: #339900;">#include &lt;boost/spirit/include/qi.hpp&gt;</span>n<span style="color: #339900;">#include &lt;boost/spirit/include/phoenix_core.hpp&gt;</span>n<span style="color: #339900;">#include &lt;boost/spirit/include/phoenix_operator.hpp&gt;</span>n<span style="color: #339900;">#include &lt;boost/spirit/include/phoenix_stl.hpp&gt;</span>n<span style="color: #339900;">#include &lt;boost/fusion/include/adapt_struct.hpp&gt;</span>n<span style="color: #339900;">#include &lt;boost/fusion/include/io.hpp&gt;</span>n<span style="color: #339900;">#include &lt;boost/lexical_cast.hpp&gt;</span>n<span style="color: #339900;">#include &lt;boost/algorithm/string/erase.hpp&gt;</span>n&nbsp;n<span style="color: #0000ff;">namespace</span> qi <span style="color: #000080;">=</span> boost<span style="color: #008080;">::</span><span style="color: #007788;">spirit</span><span style="color: #008080;">::</span><span style="color: #007788;">qi</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">namespace</span> ascii <span style="color: #000080;">=</span> boost<span style="color: #008080;">::</span><span style="color: #007788;">spirit</span><span style="color: #008080;">::</span><span style="color: #007788;">ascii</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">using</span> <span style="color: #0000ff;">namespace</span> std<span style="color: #008080;">;</span>n<span style="color: #0000ff;">using</span> <span style="color: #0000ff;">namespace</span> boost<span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">enum</span> Operator <span style="color: #008000;">&#123;</span>n plus__,n minus__,n multiply__,n divide__,n operator_count__n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">enum</span> ListItemType <span style="color: #008000;">&#123;</span>n int__,n double__,n string__,n expression__,n list_item_type_count__n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">struct</span> Expression<span style="color: #008080;">;</span>n<span style="color: #0000ff;">typedef</span> variant<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span>, <span style="color: #0000ff;">double</span>, string, Expression <span style="color: #000080;">&gt;</span> ListItem<span style="color: #008080;">;</span>n<span style="color: #0000ff;">typedef</span> vector<span style="color: #000080;">&lt;</span> ListItem <span style="color: #000080;">&gt;</span> List<span style="color: #008080;">;</span>n<span style="color: #0000ff;">struct</span> Expressionn<span style="color: #008000;">&#123;</span>n Operator operator_<span style="color: #008080;">;</span>n List list_<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>nBOOST_FUSION_ADAPT_STRUCT<span style="color: #008000;">&#40;</span>n Expression,n <span style="color: #008000;">&#40;</span>Operator, operator_<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#40;</span>List, list_<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#41;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> ListItemType target_list_item_type__ <span style="color: #000080;">&gt;</span>n<span style="color: #0000ff;">struct</span> get_cast_target_type<span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> get_cast_target_type<span style="color: #000080;">&lt;</span> int__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">typedef</span> <span style="color: #0000ff;">int</span> type<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> get_cast_target_type<span style="color: #000080;">&lt;</span> double__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">typedef</span> <span style="color: #0000ff;">double</span> type<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> get_cast_target_type<span style="color: #000080;">&lt;</span> string__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">typedef</span> string type<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> ListItemType target_list_item_type__ <span style="color: #000080;">&gt;</span>n<span style="color: #ff0000; font-style: italic;">/*unspecified*/</span><span style="color: #0000ff;">typename</span> get_cast_target_type<span style="color: #000080;">&lt;</span> target_list_item_type__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">::</span><span style="color: #007788;">type</span> cast<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span> list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> <span style="color: #000080;">&gt;</span>n<span style="color: #0000ff;">int</span> cast<span style="color: #000080;">&lt;</span> int__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span> list_item<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> <span style="color: #000080;">&gt;</span>n<span style="color: #0000ff;">double</span> cast<span style="color: #000080;">&lt;</span> double__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span> list_item<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span> <span style="color: #000040;">||</span> <span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> double__<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> double__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">double</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">static_cast</span><span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">double</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span>n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> <span style="color: #000080;">&gt;</span>nstring cast<span style="color: #000080;">&lt;</span> string__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span> list_item<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">!</span><span style="color: #000080;">=</span> expression__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> string__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> get<span style="color: #000080;">&lt;</span> string <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> lexical_cast<span style="color: #000080;">&lt;</span> string <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>list_item.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> double__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> lexical_cast<span style="color: #000080;">&lt;</span> string <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">double</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> Operator operator__, ListItemType return_type__ <span style="color: #000080;">&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> plus__, int__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">static</span> ListItem apply<span style="color: #008000;">&#40;</span>ListItem lhs, ListItem rhs<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>lhs.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>rhs.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>lhs<span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span><span style="color: #000080;">=</span> get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>rhs<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> lhs<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> plus__, double__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">static</span> ListItem apply<span style="color: #008000;">&#40;</span>ListItem lhs, ListItem rhs<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">double</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>lhs<span style="color: #008000;">&#41;</span> <span style="color: #000040;">+</span><span style="color: #000080;">=</span> cast<span style="color: #000080;">&lt;</span> double__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>rhs<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> lhs<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> plus__, string__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">static</span> ListItem apply<span style="color: #008000;">&#40;</span>ListItem lhs, ListItem rhs<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n string r <span style="color: #000080;">=</span> cast<span style="color: #000080;">&lt;</span> string__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>rhs<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n string <span style="color: #000040;">&amp;</span>l <span style="color: #000080;">=</span> get<span style="color: #000080;">&lt;</span> string <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>lhs<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n l.<span style="color: #007788;">insert</span><span style="color: #008000;">&#40;</span>l.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, r.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, r.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> lhs<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> minus__, int__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">static</span> ListItem apply<span style="color: #008000;">&#40;</span>ListItem lhs, ListItem rhs<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>lhs.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>rhs.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>lhs<span style="color: #008000;">&#41;</span> <span style="color: #000040;">-</span><span style="color: #000080;">=</span> get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>rhs<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> lhs<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> minus__, double__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">static</span> ListItem apply<span style="color: #008000;">&#40;</span>ListItem lhs, ListItem rhs<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">double</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>lhs<span style="color: #008000;">&#41;</span> <span style="color: #000040;">-</span><span style="color: #000080;">=</span> get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">double</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>rhs<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> lhs<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> minus__, string__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">static</span> ListItem apply<span style="color: #008000;">&#40;</span>ListItem lhs, ListItem rhs<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">using</span> boost<span style="color: #008080;">::</span><span style="color: #007788;">algorithm</span><span style="color: #008080;">::</span><span style="color: #007788;">erase_first</span><span style="color: #008080;">;</span>n&nbsp;n string r <span style="color: #000080;">=</span> cast<span style="color: #000080;">&lt;</span> string__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>rhs<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n string <span style="color: #000040;">&amp;</span>l <span style="color: #000080;">=</span> get<span style="color: #000080;">&lt;</span> string <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>lhs<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n erase_first<span style="color: #008000;">&#40;</span>l, r<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> lhs<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> divide__, int__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">static</span> ListItem apply<span style="color: #008000;">&#40;</span>ListItem lhs, ListItem rhs<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>lhs.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>rhs.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>lhs<span style="color: #008000;">&#41;</span> <span style="color: #000040;">/</span><span style="color: #000080;">=</span> get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>rhs<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> lhs<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> divide__, double__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">static</span> ListItem apply<span style="color: #008000;">&#40;</span>ListItem lhs, ListItem rhs<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">double</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>lhs<span style="color: #008000;">&#41;</span> <span style="color: #000040;">/</span><span style="color: #000080;">=</span> cast<span style="color: #000080;">&lt;</span> double__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>rhs<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> lhs<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> multiply__, int__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">static</span> ListItem apply<span style="color: #008000;">&#40;</span>ListItem lhs, ListItem rhs<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>lhs.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>rhs.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>lhs<span style="color: #008000;">&#41;</span> <span style="color: #000040;">*</span><span style="color: #000080;">=</span> get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>rhs<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> lhs<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;&gt;</span>n<span style="color: #0000ff;">struct</span> Operator_<span style="color: #000080;">&lt;</span> multiply__, double__ <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">static</span> ListItem apply<span style="color: #008000;">&#40;</span>ListItem lhs, ListItem rhs<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">double</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>lhs<span style="color: #008000;">&#41;</span> <span style="color: #000040;">*</span><span style="color: #000080;">=</span> cast<span style="color: #000080;">&lt;</span> double__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>rhs<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> lhs<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">struct</span> Accumulatorn<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">virtual</span> ~Accumulator<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span><span style="color: #008000;">&#125;</span>n&nbsp;n <span style="color: #0000ff;">virtual</span> Accumulator<span style="color: #000040;">*</span> create<span style="color: #008000;">&#40;</span>ListItem <span style="color: #000040;">&amp;</span>result<span style="color: #008000;">&#41;</span> <span style="color: #0000ff;">const</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>n&nbsp;n <span style="color: #0000ff;">const</span> Accumulator<span style="color: #000040;">&amp;</span> operator<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span>list_item<span style="color: #008000;">&#41;</span> <span style="color: #0000ff;">const</span>n <span style="color: #008000;">&#123;</span>n call_<span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">return</span> <span style="color: #000040;">*</span><span style="color: #0000dd;">this</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n&nbsp;n ListItem operator<span style="color: #000040;">*</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #0000ff;">const</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> <span style="color: #000040;">*</span>result_<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n&nbsp;n<span style="color: #0000ff;">protected</span> <span style="color: #008080;">:</span>n <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">void</span> call_<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span>list_item<span style="color: #008000;">&#41;</span> <span style="color: #0000ff;">const</span> <span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008080;">;</span>n&nbsp;n Accumulator<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008080;">:</span> result_<span style="color: #008000;">&#40;</span><span style="color: #0000dd;">0</span><span style="color: #008000;">&#41;</span>n , first_<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">true</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* no-op */</span> <span style="color: #008000;">&#125;</span>n&nbsp;n&nbsp;n Accumulator<span style="color: #008000;">&#40;</span>ListItem <span style="color: #000040;">&amp;</span>result<span style="color: #008000;">&#41;</span>n <span style="color: #008080;">:</span> result_<span style="color: #008000;">&#40;</span><span style="color: #000040;">&amp;</span>result<span style="color: #008000;">&#41;</span>n , first_<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">true</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* no-op */</span> <span style="color: #008000;">&#125;</span>n&nbsp;n ListItem <span style="color: #000040;">*</span>result_<span style="color: #008080;">;</span>n mutable <span style="color: #0000ff;">bool</span> first_<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> Operator operator_type__, ListItemType return_type__ <span style="color: #000080;">&gt;</span>n<span style="color: #0000ff;">struct</span> Accumulator_ <span style="color: #008080;">:</span> Accumulatorn<span style="color: #008000;">&#123;</span>n<span style="color: #0000ff;">private</span> <span style="color: #008080;">:</span>n Accumulator_<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* no-op */</span> <span style="color: #008000;">&#125;</span>n&nbsp;n Accumulator_<span style="color: #008000;">&#40;</span>ListItem <span style="color: #000040;">&amp;</span>result<span style="color: #008000;">&#41;</span>n <span style="color: #008080;">:</span> Accumulator<span style="color: #008000;">&#40;</span>result<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* no-op */</span> <span style="color: #008000;">&#125;</span>n&nbsp;n Accumulator_<span style="color: #000040;">*</span> create<span style="color: #008000;">&#40;</span>ListItem <span style="color: #000040;">&amp;</span>result<span style="color: #008000;">&#41;</span> <span style="color: #0000ff;">const</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> <span style="color: #0000dd;">new</span> Accumulator_<span style="color: #008000;">&#40;</span>result<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n&nbsp;n<span style="color: #0000ff;">protected</span> <span style="color: #008080;">:</span>n <span style="color: #ff0000; font-style: italic;">/*virtual */</span><span style="color: #0000ff;">void</span> call_<span style="color: #008000;">&#40;</span><span style="color: #0000ff;">const</span> ListItem <span style="color: #000040;">&amp;</span>list_item<span style="color: #008000;">&#41;</span> <span style="color: #0000ff;">const</span><span style="color: #ff0000; font-style: italic;">/* = 0*/</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>first_<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">switch</span> <span style="color: #008000;">&#40;</span>result_<span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>which<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">case</span> int__ <span style="color: #008080;">:</span>n <span style="color: #000040;">*</span>result_ <span style="color: #000080;">=</span> cast<span style="color: #000080;">&lt;</span> int__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">case</span> double__ <span style="color: #008080;">:</span>n <span style="color: #000040;">*</span>result_ <span style="color: #000080;">=</span> cast<span style="color: #000080;">&lt;</span> double__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">case</span> string__ <span style="color: #008080;">:</span>n <span style="color: #000040;">*</span>result_ <span style="color: #000080;">=</span> cast<span style="color: #000080;">&lt;</span> string__ <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n first_ <span style="color: #000080;">=</span> <span style="color: #0000ff;">false</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #000040;">*</span>result_ <span style="color: #000080;">=</span> Operator_<span style="color: #000080;">&lt;</span> operator_type__, return_type__ <span style="color: #000080;">&gt;</span><span style="color: #008080;">::</span><span style="color: #007788;">apply</span><span style="color: #008000;">&#40;</span><span style="color: #000040;">*</span>result_, list_item<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #008000;">&#125;</span>n&nbsp;n <span style="color: #0000ff;">friend</span> boost<span style="color: #008080;">::</span><span style="color: #007788;">shared_ptr</span><span style="color: #000080;">&lt;</span> Accumulator <span style="color: #000080;">&gt;</span> getAccumulator<span style="color: #008000;">&#40;</span>ListItem <span style="color: #000040;">&amp;</span>result, Operator operator_type, ListItemType return_type<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;nboost<span style="color: #008080;">::</span><span style="color: #007788;">shared_ptr</span><span style="color: #000080;">&lt;</span> Accumulator <span style="color: #000080;">&gt;</span> getAccumulator<span style="color: #008000;">&#40;</span>ListItem <span style="color: #000040;">&amp;</span>result, Operator operator_type, ListItemType return_type<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> plus__, int__ <span style="color: #000080;">&gt;</span> pi_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> plus__, double__ <span style="color: #000080;">&gt;</span> pd_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> plus__, string__ <span style="color: #000080;">&gt;</span> ps_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> minus__, int__ <span style="color: #000080;">&gt;</span> mi_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> minus__, double__ <span style="color: #000080;">&gt;</span> md_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> minus__, string__ <span style="color: #000080;">&gt;</span> ms_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> multiply__, int__ <span style="color: #000080;">&gt;</span> ui_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> multiply__, double__ <span style="color: #000080;">&gt;</span> ud_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> divide__, int__ <span style="color: #000080;">&gt;</span> di_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator_<span style="color: #000080;">&lt;</span> divide__, double__ <span style="color: #000080;">&gt;</span> dd_accumulator__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">static</span> Accumulator<span style="color: #000040;">*</span> accumulators__<span style="color: #008000;">&#91;</span>operator_count__<span style="color: #008000;">&#93;</span><span style="color: #008000;">&#91;</span>list_item_type_count__<span style="color: #008000;">&#93;</span> <span style="color: #000080;">=</span> <span style="color: #008000;">&#123;</span>n <span style="color: #008000;">&#123;</span> <span style="color: #000040;">&amp;</span>pi_accumulator__, <span style="color: #000040;">&amp;</span>pd_accumulator__, <span style="color: #000040;">&amp;</span>ps_accumulator__, <span style="color: #0000dd;">0</span> <span style="color: #008000;">&#125;</span>,n <span style="color: #008000;">&#123;</span> <span style="color: #000040;">&amp;</span>mi_accumulator__, <span style="color: #000040;">&amp;</span>md_accumulator__, <span style="color: #000040;">&amp;</span>ms_accumulator__, <span style="color: #0000dd;">0</span> <span style="color: #008000;">&#125;</span>,n <span style="color: #008000;">&#123;</span> <span style="color: #000040;">&amp;</span>ui_accumulator__, <span style="color: #000040;">&amp;</span>ud_accumulator__, <span style="color: #0000dd;">0</span>, <span style="color: #0000dd;">0</span> <span style="color: #008000;">&#125;</span>,n <span style="color: #008000;">&#123;</span> <span style="color: #000040;">&amp;</span>di_accumulator__, <span style="color: #000040;">&amp;</span>dd_accumulator__, <span style="color: #0000dd;">0</span>, <span style="color: #0000dd;">0</span> <span style="color: #008000;">&#125;</span>n <span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>accumulators__<span style="color: #008000;">&#91;</span>operator_type<span style="color: #008000;">&#93;</span><span style="color: #008000;">&#91;</span>return_type<span style="color: #008000;">&#93;</span> <span style="color: #000040;">!</span><span style="color: #000080;">=</span> <span style="color: #0000dd;">0</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">return</span> boost<span style="color: #008080;">::</span><span style="color: #007788;">shared_ptr</span><span style="color: #000080;">&lt;</span> Accumulator <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>accumulators__<span style="color: #008000;">&#91;</span>operator_type<span style="color: #008000;">&#93;</span><span style="color: #008000;">&#91;</span>return_type<span style="color: #008000;">&#93;</span><span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>create<span style="color: #008000;">&#40;</span>result<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>operator_type <span style="color: #000080;">==</span> multiply__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">throw</span> logic_error<span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;Don't know how to multiply a string&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">throw</span> logic_error<span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;Don't know how to divide a string&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span>n&nbsp;n<span style="color: #0000ff;">void</span> ping<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">cout</span> <span style="color: #000080;">&lt;&lt;</span> <span style="color: #FF0000;">&quot;ping&quot;</span> <span style="color: #000080;">&lt;&lt;</span> endl<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span>n&nbsp;n<span style="color: #0000ff;">template</span> <span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">typename</span> Iterator <span style="color: #000080;">&gt;</span>n<span style="color: #0000ff;">struct</span> Grammar <span style="color: #008080;">:</span> qi<span style="color: #008080;">::</span><span style="color: #007788;">grammar</span><span style="color: #000080;">&lt;</span> Iterator, Expression<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, ascii<span style="color: #008080;">::</span><span style="color: #007788;">space_type</span> <span style="color: #000080;">&gt;</span>n<span style="color: #008000;">&#123;</span>n Grammar<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008080;">:</span> Grammar<span style="color: #008080;">::</span><span style="color: #007788;">base_type</span><span style="color: #008000;">&#40;</span>expression_<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">using</span> qi<span style="color: #008080;">::</span>_val<span style="color: #008080;">;</span>n <span style="color: #0000ff;">using</span> qi<span style="color: #008080;">::</span>_1<span style="color: #008080;">;</span>n <span style="color: #0000ff;">using</span> phoenix<span style="color: #008080;">::</span><span style="color: #007788;">push_back</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">using</span> qi<span style="color: #008080;">::</span><span style="color: #007788;">lexeme</span><span style="color: #008080;">;</span>n&nbsp;n expression_ <span style="color: #000080;">=</span> <span style="color: #FF0000;">'('</span> <span style="color: #000080;">&gt;&gt;</span> operator_ <span style="color: #000080;">&gt;&gt;</span> list_ <span style="color: #000080;">&gt;&gt;</span> <span style="color: #FF0000;">')'</span>n <span style="color: #008080;">;</span>n operator_.<span style="color: #007788;">add</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;+&quot;</span>, plus__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;-&quot;</span>, minus__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;*&quot;</span>, multiply__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;/&quot;</span>, divide__<span style="color: #008000;">&#41;</span>n <span style="color: #008080;">;</span>n list_ <span style="color: #000080;">=</span> <span style="color: #000040;">+</span>list_item_n <span style="color: #008080;">;</span>n list_item_ <span style="color: #000080;">=</span> expression_n <span style="color: #000040;">|</span> qi<span style="color: #008080;">::</span><span style="color: #007788;">int_</span>n <span style="color: #000040;">|</span> qi<span style="color: #008080;">::</span><span style="color: #007788;">double_</span>n <span style="color: #000040;">|</span> string_n <span style="color: #008080;">;</span>n string_ <span style="color: #000080;">=</span> lexeme<span style="color: #008000;">&#91;</span><span style="color: #FF0000;">'&quot;'</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #000040;">*</span><span style="color: #008000;">&#40;</span>unescape_char_ <span style="color: #000040;">|</span> <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>x&quot;</span> <span style="color: #000080;">&gt;&gt;</span> qi<span style="color: #008080;">::</span><span style="color: #007788;">hex</span><span style="color: #008000;">&#41;</span> <span style="color: #000040;">|</span> <span style="color: #008000;">&#40;</span>qi<span style="color: #008080;">::</span><span style="color: #007788;">char_</span> <span style="color: #000040;">-</span> qi<span style="color: #008080;">::</span><span style="color: #007788;">char_</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">'&quot;'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">&gt;&gt;</span> <span style="color: #FF0000;">'&quot;'</span><span style="color: #008000;">&#93;</span>n <span style="color: #008080;">;</span>n unescape_char_.<span style="color: #007788;">add</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>a&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\a</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>b&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\b</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>f&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\f</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>n&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\n</span>'</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>r&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\r</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>t&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\t</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span>v&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\v</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span><span style="color: #000099; font-weight: bold;">\\</span>&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\\</span>'</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span><span style="color: #000099; font-weight: bold;">\'</span>&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\'</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;<span style="color: #000099; font-weight: bold;">\\</span><span style="color: #000099; font-weight: bold;">\&quot;</span>&quot;</span>, <span style="color: #FF0000;">'<span style="color: #000099; font-weight: bold;">\&quot;</span>'</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n&nbsp;n <span style="color: #008000;">&#125;</span>n&nbsp;n qi<span style="color: #008080;">::</span><span style="color: #007788;">rule</span><span style="color: #000080;">&lt;</span> Iterator, Expression<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, ascii<span style="color: #008080;">::</span><span style="color: #007788;">space_type</span> <span style="color: #000080;">&gt;</span> expression_<span style="color: #008080;">;</span>n qi<span style="color: #008080;">::</span><span style="color: #007788;">rule</span><span style="color: #000080;">&lt;</span> Iterator, List<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, ascii<span style="color: #008080;">::</span><span style="color: #007788;">space_type</span> <span style="color: #000080;">&gt;</span> list_<span style="color: #008080;">;</span>n qi<span style="color: #008080;">::</span><span style="color: #007788;">rule</span><span style="color: #000080;">&lt;</span> Iterator, ListItem<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, ascii<span style="color: #008080;">::</span><span style="color: #007788;">space_type</span> <span style="color: #000080;">&gt;</span> list_item_<span style="color: #008080;">;</span>n qi<span style="color: #008080;">::</span><span style="color: #007788;">rule</span><span style="color: #000080;">&lt;</span> Iterator, string<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>, ascii<span style="color: #008080;">::</span><span style="color: #007788;">space_type</span> <span style="color: #000080;">&gt;</span> string_<span style="color: #008080;">;</span>n qi<span style="color: #008080;">::</span><span style="color: #007788;">symbols</span><span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #0000ff;">const</span>, <span style="color: #0000ff;">char</span> <span style="color: #0000ff;">const</span> <span style="color: #000080;">&gt;</span> unescape_char_<span style="color: #008080;">;</span>n qi<span style="color: #008080;">::</span><span style="color: #007788;">symbols</span><span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">char</span> <span style="color: #0000ff;">const</span>, Operator <span style="color: #000080;">&gt;</span> operator_<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span><span style="color: #008080;">;</span>n&nbsp;nListItem evaluate<span style="color: #008000;">&#40;</span>Expression <span style="color: #000040;">&amp;</span>expression<span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n ListItemType result_type<span style="color: #008000;">&#40;</span>int__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n ListItem retval<span style="color: #008080;">;</span>n <span style="color: #666666;">// first pass: evaluate any sub-expressions</span>n <span style="color: #0000ff;">for</span> <span style="color: #008000;">&#40;</span>List<span style="color: #008080;">::</span><span style="color: #007788;">iterator</span> iter<span style="color: #008000;">&#40;</span>expression.<span style="color: #007788;">list_</span>.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span> iter <span style="color: #000040;">!</span><span style="color: #000080;">=</span> expression.<span style="color: #007788;">list_</span>.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span> <span style="color: #000040;">++</span>iter<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>iter<span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>which<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> expression__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #000040;">*</span>iter <span style="color: #000080;">=</span> evaluate<span style="color: #008000;">&#40;</span>get<span style="color: #000080;">&lt;</span> Expression <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span><span style="color: #000040;">*</span>iter<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">switch</span> <span style="color: #008000;">&#40;</span>iter<span style="color: #000040;">-</span><span style="color: #000080;">&gt;</span>which<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">case</span> int__ <span style="color: #008080;">:</span>n <span style="color: #666666;">// this is the default type - it doesn't change anything</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">case</span> double__ <span style="color: #008080;">:</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>result_type <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n result_type <span style="color: #000080;">=</span> double__<span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span> <span style="color: #ff0000; font-style: italic;">/* either already a double, or it's a string */</span> <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">case</span> string__ <span style="color: #008080;">:</span>n result_type <span style="color: #000080;">=</span> string__<span style="color: #008080;">;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">default</span> <span style="color: #008080;">:</span>n <span style="color: #0000ff;">throw</span> logic_error<span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;unexpected operand type&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">switch</span> <span style="color: #008000;">&#40;</span>result_type<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">case</span> int__ <span style="color: #008080;">:</span>n <span style="color: #666666;">// nothing to do in this case: this is the default for the variant, and it will be zero-initialized</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">case</span> double__ <span style="color: #008080;">:</span>n retval <span style="color: #000080;">=</span> <span style="color:#800080;">0.0</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">case</span> string__ <span style="color: #008080;">:</span>n retval <span style="color: #000080;">=</span> string<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">break</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">default</span> <span style="color: #008080;">:</span>n <span style="color: #0000ff;">throw</span> logic_error<span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;Unexpected result type&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n boost<span style="color: #008080;">::</span><span style="color: #007788;">shared_ptr</span><span style="color: #000080;">&lt;</span> Accumulator <span style="color: #000080;">&gt;</span> accumulator <span style="color: #000080;">=</span> getAccumulator<span style="color: #008000;">&#40;</span>retval, expression.<span style="color: #007788;">operator_</span>, result_type<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">for</span> <span style="color: #008000;">&#40;</span>List<span style="color: #008080;">::</span><span style="color: #007788;">const_iterator</span> iter<span style="color: #008000;">&#40;</span>expression.<span style="color: #007788;">list_</span>.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span> iter <span style="color: #000040;">!</span><span style="color: #000080;">=</span> expression.<span style="color: #007788;">list_</span>.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span> <span style="color: #000040;">++</span>iter<span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #008000;">&#40;</span><span style="color: #000040;">*</span>accumulator<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#40;</span><span style="color: #000040;">*</span>iter<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n&nbsp;n <span style="color: #0000ff;">return</span> retval<span style="color: #008080;">;</span>n<span style="color: #008000;">&#125;</span> n&nbsp;n<span style="color: #0000ff;">int</span> main<span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span>n<span style="color: #008000;">&#123;</span>n <span style="color: #0000ff;">using</span> boost<span style="color: #008080;">::</span><span style="color: #007788;">spirit</span><span style="color: #008080;">::</span><span style="color: #007788;">ascii</span><span style="color: #008080;">::</span><span style="color: #007788;">space</span><span style="color: #008080;">;</span>n&nbsp;n Expression expression<span style="color: #008080;">;</span>n Grammar<span style="color: #000080;">&lt;</span> string<span style="color: #008080;">::</span><span style="color: #007788;">const_iterator</span> <span style="color: #000080;">&gt;</span> grammar<span style="color: #008080;">;</span>n string test<span style="color: #008000;">&#40;</span><span style="color: #FF0000;">&quot;(+ 1 (+ 1 1.2))&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n string<span style="color: #008080;">::</span><span style="color: #007788;">const_iterator</span> iter <span style="color: #000080;">=</span> test.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n string<span style="color: #008080;">::</span><span style="color: #007788;">const_iterator</span> end <span style="color: #000080;">=</span> test.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>qi<span style="color: #008080;">::</span><span style="color: #007788;">phrase_parse</span><span style="color: #008000;">&#40;</span>iter, end, grammar, space, expression<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>expression.<span style="color: #007788;">operator_</span> <span style="color: #000080;">==</span> plus__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n ListItem result<span style="color: #008000;">&#40;</span>evaluate<span style="color: #008000;">&#40;</span>expression<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>result.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> double__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">double</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>result<span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> <span style="color:#800080;">3.2</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span><span style="color: #000040;">!</span><span style="color: #FF0000;">&quot;parse failed&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n test <span style="color: #000080;">=</span> <span style="color: #FF0000;">&quot;(* 1 2)&quot;</span><span style="color: #008080;">;</span>n iter <span style="color: #000080;">=</span> test.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n end <span style="color: #000080;">=</span> test.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n expression.<span style="color: #007788;">list_</span>.<span style="color: #007788;">clear</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>qi<span style="color: #008080;">::</span><span style="color: #007788;">phrase_parse</span><span style="color: #008000;">&#40;</span>iter, end, grammar, space, expression<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>expression.<span style="color: #007788;">operator_</span> <span style="color: #000080;">==</span> multiply__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n ListItem result<span style="color: #008000;">&#40;</span>evaluate<span style="color: #008000;">&#40;</span>expression<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>result.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> int__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>get<span style="color: #000080;">&lt;</span> <span style="color: #0000ff;">int</span> <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>result<span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> <span style="color: #0000dd;">2</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span><span style="color: #000040;">!</span><span style="color: #FF0000;">&quot;parse failed&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n test <span style="color: #000080;">=</span> <span style="color: #FF0000;">&quot;(+ <span style="color: #000099; font-weight: bold;">\&quot;</span>Hello, <span style="color: #000099; font-weight: bold;">\&quot;</span> <span style="color: #000099; font-weight: bold;">\&quot;</span>world!<span style="color: #000099; font-weight: bold;">\&quot;</span>)&quot;</span><span style="color: #008080;">;</span>n iter <span style="color: #000080;">=</span> test.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n end <span style="color: #000080;">=</span> test.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n expression.<span style="color: #007788;">list_</span>.<span style="color: #007788;">clear</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>qi<span style="color: #008080;">::</span><span style="color: #007788;">phrase_parse</span><span style="color: #008000;">&#40;</span>iter, end, grammar, space, expression<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>expression.<span style="color: #007788;">operator_</span> <span style="color: #000080;">==</span> plus__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n ListItem result<span style="color: #008000;">&#40;</span>evaluate<span style="color: #008000;">&#40;</span>expression<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>result.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> string__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>get<span style="color: #000080;">&lt;</span> string <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>result<span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> <span style="color: #FF0000;">&quot;Hello, world!&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span><span style="color: #000040;">!</span><span style="color: #FF0000;">&quot;parse failed&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n test <span style="color: #000080;">=</span> <span style="color: #FF0000;">&quot;(+ <span style="color: #000099; font-weight: bold;">\&quot;</span>Goodbye<span style="color: #000099; font-weight: bold;">\&quot;</span> (- <span style="color: #000099; font-weight: bold;">\&quot;</span>Hello, world!<span style="color: #000099; font-weight: bold;">\&quot;</span> <span style="color: #000099; font-weight: bold;">\&quot;</span>Hello<span style="color: #000099; font-weight: bold;">\&quot;</span>))&quot;</span><span style="color: #008080;">;</span>n iter <span style="color: #000080;">=</span> test.<span style="color: #007788;">begin</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n end <span style="color: #000080;">=</span> test.<span style="color: #007788;">end</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n expression.<span style="color: #007788;">list_</span>.<span style="color: #007788;">clear</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000ff;">if</span> <span style="color: #008000;">&#40;</span>qi<span style="color: #008080;">::</span><span style="color: #007788;">phrase_parse</span><span style="color: #008000;">&#40;</span>iter, end, grammar, space, expression<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>expression.<span style="color: #007788;">operator_</span> <span style="color: #000080;">==</span> plus__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n ListItem result<span style="color: #008000;">&#40;</span>evaluate<span style="color: #008000;">&#40;</span>expression<span style="color: #008000;">&#41;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>result.<span style="color: #007788;">which</span><span style="color: #008000;">&#40;</span><span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> string__<span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span>get<span style="color: #000080;">&lt;</span> string <span style="color: #000080;">&gt;</span><span style="color: #008000;">&#40;</span>result<span style="color: #008000;">&#41;</span> <span style="color: #000080;">==</span> <span style="color: #FF0000;">&quot;Goodbye, world!&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n <span style="color: #0000ff;">else</span>n <span style="color: #008000;">&#123;</span>n <span style="color: #0000dd;">assert</span><span style="color: #008000;">&#40;</span><span style="color: #000040;">!</span><span style="color: #FF0000;">&quot;parse failed&quot;</span><span style="color: #008000;">&#41;</span><span style="color: #008080;">;</span>n <span style="color: #008000;">&#125;</span>n<span style="color: #008000;">&#125;</span></pre></td></tr></table></div>nn<p></div></p>nn"
post_title: "A few final words on functional programming"
post_excerpt: "The previous two installments of C++ for the self-taught were both about functional programming. Before we get back to Chausette, I&rsquo;ll put in a few final words on the topic, combining both run-time functional programming with compile-time functional programming and, &hellip; <a href="http://rlc.vlinder.ca/blog/2011/08/a-few-final-word-on-functional-programming/">Continue reading <span>&rarr;</span></a>n"
post_status: "inherit"
comment_status: "open"
ping_status: "open"
post_password: ""
post_name: "39-revision-2"
to_ping: ""
pinged: ""
post_modified: "2011-08-05 13:59:38"
post_modified_gmt: "2011-08-05 18:59:38"
post_content_filtered: ""
post_parent: 39
guid: "http://cpp4theselftaught.com/2011/08/39-revision-2/"
menu_order: 0
post_type: "revision"
post_mime_type: ""
comment_count: 0
